// Package rpc provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package rpc

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// RawTXRequest defines model for RawTXRequest.
type RawTXRequest struct {
	Address     string `json:"address"`
	RawHexBytes string `json:"raw_hex_bytes"`
}

// PostV1ClientBroadcastTxSyncJSONBody defines parameters for PostV1ClientBroadcastTxSync.
type PostV1ClientBroadcastTxSyncJSONBody = RawTXRequest

// PostV1ClientBroadcastTxSyncJSONRequestBody defines body for PostV1ClientBroadcastTxSync for application/json ContentType.
type PostV1ClientBroadcastTxSyncJSONRequestBody = PostV1ClientBroadcastTxSyncJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Relays a raw transaction
	// (POST /v1/client/broadcast_tx_sync)
	PostV1ClientBroadcastTxSync(ctx echo.Context) error
	// Get the liveness of the Pocket API node
	// (GET /v1/health)
	GetV1Health(ctx echo.Context) error
	// Get the current version of the Pocket Network API
	// (GET /v1/version)
	GetV1Version(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostV1ClientBroadcastTxSync converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ClientBroadcastTxSync(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1ClientBroadcastTxSync(ctx)
	return err
}

// GetV1Health converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1Health(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1Health(ctx)
	return err
}

// GetV1Version converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1Version(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1Version(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v1/client/broadcast_tx_sync", wrapper.PostV1ClientBroadcastTxSync)
	router.GET(baseURL+"/v1/health", wrapper.GetV1Health)
	router.GET(baseURL+"/v1/version", wrapper.GetV1Version)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xVTW/jNhD9KwTbo9dy9gModGq+ug2a7gaJNyjQDYIROY64oUguOYotBP7vxVCyo9jJ",
	"tofeaHPmDefNe6NHqXwTvENHSZaPMqkaG8jHS1jO/7rE7y0m4t8h+oCRDOZb0DpiykfqAspSJorG3cn1",
	"REZY3ta4uq06wpciOAS/tyailuXfW6jdxJvJJtFX31CRXHMmrgijA3viVcbWmFQ0gYx3spS/GaeFb0k0",
	"PqKAio8XXt0jiU9ISx/v5US20cpS1kQhlUUR/D1N3XC5nkjjFp6BlXcEKreODZic4i38uhv//AHz2iRh",
	"kqAaxeHFmdC4MM7w5c47hOIXXl4cCwXWTr+6r24IMEmA0IbZqlpCLYZigmogEdFCl4QGAhH76SQBTouI",
	"KXiXMAny+Y9F9I0A14nKenWvajBOpC4RNuNqDxjNwmASYG0PjrpHZwweuo/8fLC2ExGXEHXfXYBIRpkA",
	"ZNydcF5jEktDtbj4/Md8KifSGoUuIRPooOE5/nk2F+fDv7tjuDNUt9VU+SZP5M3QdBHyM4vK+qpowLji",
	"/Oz49NPVKVNPGJv0eXGF8cEofGWmRY4q5ESSIctRe4J4wJj68R1MZ9MZQ/uADoKRpXw3nU3fyYkMQHVW",
	"XPFwUChr0FFRRQ9aQaJbWt2mzqlsFN8bhu0CTN2ZzkUTXR8c57yjTdp8dcVJvR8w0ZHX3UZ76DIKhGCN",
	"yjjFt8SP3LiUTz9HXMhS/lQ82bgYPFw8M3D2znOpXsJSUASXQGV9khcVbiQgxx6l2GI27aAwrvx2Ntu3",
	"33wEB1qjZlAWS4NN8N5mgbAnMUYfExP9vscZdUy4oiJYMLlXXEET8thGpYRfiAUY20aU+40dgd5Ygyt8",
	"+P8rHLq+A+GVamNELZa1scg9sxm44x1mRyRkvNQ2DcSOx9AbGkR8Pg8WLNwl3pC92uQNJ7L6agRLNb/9",
	"Dl+Q2kek64Pf+5j/MrU+tOun8X7//ovrC3bijfjiIoKqobI44vb1ePYmRnHKbO00/hEp02LNAzpMiSnn",
	"34M9eXvyVhnxMPS95WHr2x8RcT0E7TChcQGtpR8q48lnTxrpN8Rk75u2p5GTvsB2L7/SfdaPy3s4Dbob",
	"kbD5WBxenI142PR9k8umTDFfPI52alkU1iuwtU9Ufpj98u6tXN9sIXZHdv1i9b7qsLw3RdeT3eTzfx3g",
	"ADHMbx/hxKQApOrhQ2ahE6lf6ukpe3DB+mb9TwAAAP//mezRxrYIAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
