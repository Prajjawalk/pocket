// Code generated by MockGen. DO NOT EDIT.
// Source: runtime_module.go

// Package mock_modules is a generated GoMock package.
package mock_modules

import (
	reflect "reflect"

	clock "github.com/benbjohnson/clock"
	gomock "github.com/golang/mock/gomock"
	modules "github.com/pokt-network/pocket/internal/shared/modules"
)

// MockRuntimeMgr is a mock of RuntimeMgr interface.
type MockRuntimeMgr struct {
	ctrl     *gomock.Controller
	recorder *MockRuntimeMgrMockRecorder
}

// MockRuntimeMgrMockRecorder is the mock recorder for MockRuntimeMgr.
type MockRuntimeMgrMockRecorder struct {
	mock *MockRuntimeMgr
}

// NewMockRuntimeMgr creates a new mock instance.
func NewMockRuntimeMgr(ctrl *gomock.Controller) *MockRuntimeMgr {
	mock := &MockRuntimeMgr{ctrl: ctrl}
	mock.recorder = &MockRuntimeMgrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuntimeMgr) EXPECT() *MockRuntimeMgrMockRecorder {
	return m.recorder
}

// GetClock mocks base method.
func (m *MockRuntimeMgr) GetClock() clock.Clock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClock")
	ret0, _ := ret[0].(clock.Clock)
	return ret0
}

// GetClock indicates an expected call of GetClock.
func (mr *MockRuntimeMgrMockRecorder) GetClock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClock", reflect.TypeOf((*MockRuntimeMgr)(nil).GetClock))
}

// GetConfig mocks base method.
func (m *MockRuntimeMgr) GetConfig() modules.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(modules.Config)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockRuntimeMgrMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockRuntimeMgr)(nil).GetConfig))
}

// GetGenesis mocks base method.
func (m *MockRuntimeMgr) GetGenesis() modules.GenesisState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenesis")
	ret0, _ := ret[0].(modules.GenesisState)
	return ret0
}

// GetGenesis indicates an expected call of GetGenesis.
func (mr *MockRuntimeMgrMockRecorder) GetGenesis() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenesis", reflect.TypeOf((*MockRuntimeMgr)(nil).GetGenesis))
}
