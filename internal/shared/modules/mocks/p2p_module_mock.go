// Code generated by MockGen. DO NOT EDIT.
// Source: p2p_module.go

// Package mock_modules is a generated GoMock package.
package mock_modules

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	crypto "github.com/pokt-network/pocket/internal/shared/crypto"
	modules "github.com/pokt-network/pocket/internal/shared/modules"
	anypb "google.golang.org/protobuf/types/known/anypb"
)

// MockP2PModule is a mock of P2PModule interface.
type MockP2PModule struct {
	ctrl     *gomock.Controller
	recorder *MockP2PModuleMockRecorder
}

// MockP2PModuleMockRecorder is the mock recorder for MockP2PModule.
type MockP2PModuleMockRecorder struct {
	mock *MockP2PModule
}

// NewMockP2PModule creates a new mock instance.
func NewMockP2PModule(ctrl *gomock.Controller) *MockP2PModule {
	mock := &MockP2PModule{ctrl: ctrl}
	mock.recorder = &MockP2PModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockP2PModule) EXPECT() *MockP2PModuleMockRecorder {
	return m.recorder
}

// Broadcast mocks base method.
func (m *MockP2PModule) Broadcast(msg *anypb.Any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Broadcast", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockP2PModuleMockRecorder) Broadcast(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockP2PModule)(nil).Broadcast), msg)
}

// Create mocks base method.
func (m *MockP2PModule) Create(runtime modules.RuntimeMgr) (modules.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", runtime)
	ret0, _ := ret[0].(modules.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockP2PModuleMockRecorder) Create(runtime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockP2PModule)(nil).Create), runtime)
}

// GetAddress mocks base method.
func (m *MockP2PModule) GetAddress() (crypto.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress")
	ret0, _ := ret[0].(crypto.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockP2PModuleMockRecorder) GetAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockP2PModule)(nil).GetAddress))
}

// GetBus mocks base method.
func (m *MockP2PModule) GetBus() modules.Bus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBus")
	ret0, _ := ret[0].(modules.Bus)
	return ret0
}

// GetBus indicates an expected call of GetBus.
func (mr *MockP2PModuleMockRecorder) GetBus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBus", reflect.TypeOf((*MockP2PModule)(nil).GetBus))
}

// GetModuleName mocks base method.
func (m *MockP2PModule) GetModuleName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetModuleName indicates an expected call of GetModuleName.
func (mr *MockP2PModuleMockRecorder) GetModuleName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleName", reflect.TypeOf((*MockP2PModule)(nil).GetModuleName))
}

// Send mocks base method.
func (m *MockP2PModule) Send(addr crypto.Address, msg *anypb.Any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", addr, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockP2PModuleMockRecorder) Send(addr, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockP2PModule)(nil).Send), addr, msg)
}

// SetBus mocks base method.
func (m *MockP2PModule) SetBus(arg0 modules.Bus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBus", arg0)
}

// SetBus indicates an expected call of SetBus.
func (mr *MockP2PModuleMockRecorder) SetBus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBus", reflect.TypeOf((*MockP2PModule)(nil).SetBus), arg0)
}

// Start mocks base method.
func (m *MockP2PModule) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockP2PModuleMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockP2PModule)(nil).Start))
}

// Stop mocks base method.
func (m *MockP2PModule) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockP2PModuleMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockP2PModule)(nil).Stop))
}

// ValidateConfig mocks base method.
func (m *MockP2PModule) ValidateConfig(arg0 modules.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateConfig indicates an expected call of ValidateConfig.
func (mr *MockP2PModuleMockRecorder) ValidateConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfig", reflect.TypeOf((*MockP2PModule)(nil).ValidateConfig), arg0)
}
