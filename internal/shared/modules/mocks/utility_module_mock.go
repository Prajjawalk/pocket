// Code generated by MockGen. DO NOT EDIT.
// Source: utility_module.go

// Package mock_modules is a generated GoMock package.
package mock_modules

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	modules "github.com/pokt-network/pocket/internal/shared/modules"
	anypb "google.golang.org/protobuf/types/known/anypb"
)

// MockUtilityModule is a mock of UtilityModule interface.
type MockUtilityModule struct {
	ctrl     *gomock.Controller
	recorder *MockUtilityModuleMockRecorder
}

// MockUtilityModuleMockRecorder is the mock recorder for MockUtilityModule.
type MockUtilityModuleMockRecorder struct {
	mock *MockUtilityModule
}

// NewMockUtilityModule creates a new mock instance.
func NewMockUtilityModule(ctrl *gomock.Controller) *MockUtilityModule {
	mock := &MockUtilityModule{ctrl: ctrl}
	mock.recorder = &MockUtilityModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUtilityModule) EXPECT() *MockUtilityModuleMockRecorder {
	return m.recorder
}

// CheckTransaction mocks base method.
func (m *MockUtilityModule) CheckTransaction(tx []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTransaction", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckTransaction indicates an expected call of CheckTransaction.
func (mr *MockUtilityModuleMockRecorder) CheckTransaction(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTransaction", reflect.TypeOf((*MockUtilityModule)(nil).CheckTransaction), tx)
}

// Create mocks base method.
func (m *MockUtilityModule) Create(runtime modules.RuntimeMgr) (modules.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", runtime)
	ret0, _ := ret[0].(modules.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUtilityModuleMockRecorder) Create(runtime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUtilityModule)(nil).Create), runtime)
}

// GetBus mocks base method.
func (m *MockUtilityModule) GetBus() modules.Bus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBus")
	ret0, _ := ret[0].(modules.Bus)
	return ret0
}

// GetBus indicates an expected call of GetBus.
func (mr *MockUtilityModuleMockRecorder) GetBus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBus", reflect.TypeOf((*MockUtilityModule)(nil).GetBus))
}

// GetModuleName mocks base method.
func (m *MockUtilityModule) GetModuleName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetModuleName indicates an expected call of GetModuleName.
func (mr *MockUtilityModuleMockRecorder) GetModuleName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleName", reflect.TypeOf((*MockUtilityModule)(nil).GetModuleName))
}

// HandleMessage mocks base method.
func (m *MockUtilityModule) HandleMessage(arg0 *anypb.Any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleMessage indicates an expected call of HandleMessage.
func (mr *MockUtilityModuleMockRecorder) HandleMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleMessage", reflect.TypeOf((*MockUtilityModule)(nil).HandleMessage), arg0)
}

// NewContext mocks base method.
func (m *MockUtilityModule) NewContext(height int64) (modules.UtilityContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewContext", height)
	ret0, _ := ret[0].(modules.UtilityContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewContext indicates an expected call of NewContext.
func (mr *MockUtilityModuleMockRecorder) NewContext(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewContext", reflect.TypeOf((*MockUtilityModule)(nil).NewContext), height)
}

// SetBus mocks base method.
func (m *MockUtilityModule) SetBus(arg0 modules.Bus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBus", arg0)
}

// SetBus indicates an expected call of SetBus.
func (mr *MockUtilityModuleMockRecorder) SetBus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBus", reflect.TypeOf((*MockUtilityModule)(nil).SetBus), arg0)
}

// Start mocks base method.
func (m *MockUtilityModule) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockUtilityModuleMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockUtilityModule)(nil).Start))
}

// Stop mocks base method.
func (m *MockUtilityModule) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockUtilityModuleMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockUtilityModule)(nil).Stop))
}

// ValidateConfig mocks base method.
func (m *MockUtilityModule) ValidateConfig(arg0 modules.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateConfig indicates an expected call of ValidateConfig.
func (mr *MockUtilityModuleMockRecorder) ValidateConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfig", reflect.TypeOf((*MockUtilityModule)(nil).ValidateConfig), arg0)
}

// MockUtilityContext is a mock of UtilityContext interface.
type MockUtilityContext struct {
	ctrl     *gomock.Controller
	recorder *MockUtilityContextMockRecorder
}

// MockUtilityContextMockRecorder is the mock recorder for MockUtilityContext.
type MockUtilityContextMockRecorder struct {
	mock *MockUtilityContext
}

// NewMockUtilityContext creates a new mock instance.
func NewMockUtilityContext(ctrl *gomock.Controller) *MockUtilityContext {
	mock := &MockUtilityContext{ctrl: ctrl}
	mock.recorder = &MockUtilityContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUtilityContext) EXPECT() *MockUtilityContextMockRecorder {
	return m.recorder
}

// ApplyBlock mocks base method.
func (m *MockUtilityContext) ApplyBlock() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyBlock")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyBlock indicates an expected call of ApplyBlock.
func (mr *MockUtilityContextMockRecorder) ApplyBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyBlock", reflect.TypeOf((*MockUtilityContext)(nil).ApplyBlock))
}

// Commit mocks base method.
func (m *MockUtilityContext) Commit(quorumCert []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", quorumCert)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockUtilityContextMockRecorder) Commit(quorumCert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockUtilityContext)(nil).Commit), quorumCert)
}

// CreateAndApplyProposalBlock mocks base method.
func (m *MockUtilityContext) CreateAndApplyProposalBlock(proposer []byte, maxTransactionBytes int) ([]byte, [][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAndApplyProposalBlock", proposer, maxTransactionBytes)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([][]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateAndApplyProposalBlock indicates an expected call of CreateAndApplyProposalBlock.
func (mr *MockUtilityContextMockRecorder) CreateAndApplyProposalBlock(proposer, maxTransactionBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAndApplyProposalBlock", reflect.TypeOf((*MockUtilityContext)(nil).CreateAndApplyProposalBlock), proposer, maxTransactionBytes)
}

// GetPersistenceContext mocks base method.
func (m *MockUtilityContext) GetPersistenceContext() modules.PersistenceRWContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersistenceContext")
	ret0, _ := ret[0].(modules.PersistenceRWContext)
	return ret0
}

// GetPersistenceContext indicates an expected call of GetPersistenceContext.
func (mr *MockUtilityContextMockRecorder) GetPersistenceContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersistenceContext", reflect.TypeOf((*MockUtilityContext)(nil).GetPersistenceContext))
}

// Release mocks base method.
func (m *MockUtilityContext) Release() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release")
	ret0, _ := ret[0].(error)
	return ret0
}

// Release indicates an expected call of Release.
func (mr *MockUtilityContextMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockUtilityContext)(nil).Release))
}

// MockUnstakingActor is a mock of UnstakingActor interface.
type MockUnstakingActor struct {
	ctrl     *gomock.Controller
	recorder *MockUnstakingActorMockRecorder
}

// MockUnstakingActorMockRecorder is the mock recorder for MockUnstakingActor.
type MockUnstakingActorMockRecorder struct {
	mock *MockUnstakingActor
}

// NewMockUnstakingActor creates a new mock instance.
func NewMockUnstakingActor(ctrl *gomock.Controller) *MockUnstakingActor {
	mock := &MockUnstakingActor{ctrl: ctrl}
	mock.recorder = &MockUnstakingActorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnstakingActor) EXPECT() *MockUnstakingActorMockRecorder {
	return m.recorder
}

// GetAddress mocks base method.
func (m *MockUnstakingActor) GetAddress() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockUnstakingActorMockRecorder) GetAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockUnstakingActor)(nil).GetAddress))
}

// GetOutputAddress mocks base method.
func (m *MockUnstakingActor) GetOutputAddress() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutputAddress")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetOutputAddress indicates an expected call of GetOutputAddress.
func (mr *MockUnstakingActorMockRecorder) GetOutputAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutputAddress", reflect.TypeOf((*MockUnstakingActor)(nil).GetOutputAddress))
}

// GetStakeAmount mocks base method.
func (m *MockUnstakingActor) GetStakeAmount() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStakeAmount")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStakeAmount indicates an expected call of GetStakeAmount.
func (mr *MockUnstakingActorMockRecorder) GetStakeAmount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStakeAmount", reflect.TypeOf((*MockUnstakingActor)(nil).GetStakeAmount))
}
