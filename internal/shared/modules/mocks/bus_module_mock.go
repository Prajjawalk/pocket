// Code generated by MockGen. DO NOT EDIT.
// Source: bus_module.go

// Package mock_modules is a generated GoMock package.
package mock_modules

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	messaging "github.com/pokt-network/pocket/internal/shared/messaging"
	modules "github.com/pokt-network/pocket/internal/shared/modules"
)

// MockBus is a mock of Bus interface.
type MockBus struct {
	ctrl     *gomock.Controller
	recorder *MockBusMockRecorder
}

// MockBusMockRecorder is the mock recorder for MockBus.
type MockBusMockRecorder struct {
	mock *MockBus
}

// NewMockBus creates a new mock instance.
func NewMockBus(ctrl *gomock.Controller) *MockBus {
	mock := &MockBus{ctrl: ctrl}
	mock.recorder = &MockBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBus) EXPECT() *MockBusMockRecorder {
	return m.recorder
}

// GetBusEvent mocks base method.
func (m *MockBus) GetBusEvent() *messaging.PocketEnvelope {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBusEvent")
	ret0, _ := ret[0].(*messaging.PocketEnvelope)
	return ret0
}

// GetBusEvent indicates an expected call of GetBusEvent.
func (mr *MockBusMockRecorder) GetBusEvent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusEvent", reflect.TypeOf((*MockBus)(nil).GetBusEvent))
}

// GetConsensusModule mocks base method.
func (m *MockBus) GetConsensusModule() modules.ConsensusModule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsensusModule")
	ret0, _ := ret[0].(modules.ConsensusModule)
	return ret0
}

// GetConsensusModule indicates an expected call of GetConsensusModule.
func (mr *MockBusMockRecorder) GetConsensusModule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsensusModule", reflect.TypeOf((*MockBus)(nil).GetConsensusModule))
}

// GetEventBus mocks base method.
func (m *MockBus) GetEventBus() modules.EventsChannel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventBus")
	ret0, _ := ret[0].(modules.EventsChannel)
	return ret0
}

// GetEventBus indicates an expected call of GetEventBus.
func (mr *MockBusMockRecorder) GetEventBus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventBus", reflect.TypeOf((*MockBus)(nil).GetEventBus))
}

// GetLoggerModule mocks base method.
func (m *MockBus) GetLoggerModule() modules.LoggerModule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoggerModule")
	ret0, _ := ret[0].(modules.LoggerModule)
	return ret0
}

// GetLoggerModule indicates an expected call of GetLoggerModule.
func (mr *MockBusMockRecorder) GetLoggerModule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggerModule", reflect.TypeOf((*MockBus)(nil).GetLoggerModule))
}

// GetP2PModule mocks base method.
func (m *MockBus) GetP2PModule() modules.P2PModule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetP2PModule")
	ret0, _ := ret[0].(modules.P2PModule)
	return ret0
}

// GetP2PModule indicates an expected call of GetP2PModule.
func (mr *MockBusMockRecorder) GetP2PModule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetP2PModule", reflect.TypeOf((*MockBus)(nil).GetP2PModule))
}

// GetPersistenceModule mocks base method.
func (m *MockBus) GetPersistenceModule() modules.PersistenceModule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersistenceModule")
	ret0, _ := ret[0].(modules.PersistenceModule)
	return ret0
}

// GetPersistenceModule indicates an expected call of GetPersistenceModule.
func (mr *MockBusMockRecorder) GetPersistenceModule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersistenceModule", reflect.TypeOf((*MockBus)(nil).GetPersistenceModule))
}

// GetRPCModule mocks base method.
func (m *MockBus) GetRPCModule() modules.RPCModule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRPCModule")
	ret0, _ := ret[0].(modules.RPCModule)
	return ret0
}

// GetRPCModule indicates an expected call of GetRPCModule.
func (mr *MockBusMockRecorder) GetRPCModule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRPCModule", reflect.TypeOf((*MockBus)(nil).GetRPCModule))
}

// GetRuntimeMgr mocks base method.
func (m *MockBus) GetRuntimeMgr() modules.RuntimeMgr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuntimeMgr")
	ret0, _ := ret[0].(modules.RuntimeMgr)
	return ret0
}

// GetRuntimeMgr indicates an expected call of GetRuntimeMgr.
func (mr *MockBusMockRecorder) GetRuntimeMgr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuntimeMgr", reflect.TypeOf((*MockBus)(nil).GetRuntimeMgr))
}

// GetTelemetryModule mocks base method.
func (m *MockBus) GetTelemetryModule() modules.TelemetryModule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTelemetryModule")
	ret0, _ := ret[0].(modules.TelemetryModule)
	return ret0
}

// GetTelemetryModule indicates an expected call of GetTelemetryModule.
func (mr *MockBusMockRecorder) GetTelemetryModule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTelemetryModule", reflect.TypeOf((*MockBus)(nil).GetTelemetryModule))
}

// GetUtilityModule mocks base method.
func (m *MockBus) GetUtilityModule() modules.UtilityModule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUtilityModule")
	ret0, _ := ret[0].(modules.UtilityModule)
	return ret0
}

// GetUtilityModule indicates an expected call of GetUtilityModule.
func (mr *MockBusMockRecorder) GetUtilityModule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUtilityModule", reflect.TypeOf((*MockBus)(nil).GetUtilityModule))
}

// PublishEventToBus mocks base method.
func (m *MockBus) PublishEventToBus(e *messaging.PocketEnvelope) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishEventToBus", e)
}

// PublishEventToBus indicates an expected call of PublishEventToBus.
func (mr *MockBusMockRecorder) PublishEventToBus(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEventToBus", reflect.TypeOf((*MockBus)(nil).PublishEventToBus), e)
}
