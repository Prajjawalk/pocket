// Code generated by MockGen. DO NOT EDIT.
// Source: telemetry_module.go

// Package mock_modules is a generated GoMock package.
package mock_modules

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	modules "github.com/pokt-network/pocket/internal/shared/modules"
	prometheus "github.com/prometheus/client_golang/prometheus"
)

// MockTelemetryModule is a mock of TelemetryModule interface.
type MockTelemetryModule struct {
	ctrl     *gomock.Controller
	recorder *MockTelemetryModuleMockRecorder
}

// MockTelemetryModuleMockRecorder is the mock recorder for MockTelemetryModule.
type MockTelemetryModuleMockRecorder struct {
	mock *MockTelemetryModule
}

// NewMockTelemetryModule creates a new mock instance.
func NewMockTelemetryModule(ctrl *gomock.Controller) *MockTelemetryModule {
	mock := &MockTelemetryModule{ctrl: ctrl}
	mock.recorder = &MockTelemetryModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelemetryModule) EXPECT() *MockTelemetryModuleMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTelemetryModule) Create(runtime modules.RuntimeMgr) (modules.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", runtime)
	ret0, _ := ret[0].(modules.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTelemetryModuleMockRecorder) Create(runtime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTelemetryModule)(nil).Create), runtime)
}

// GetBus mocks base method.
func (m *MockTelemetryModule) GetBus() modules.Bus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBus")
	ret0, _ := ret[0].(modules.Bus)
	return ret0
}

// GetBus indicates an expected call of GetBus.
func (mr *MockTelemetryModuleMockRecorder) GetBus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBus", reflect.TypeOf((*MockTelemetryModule)(nil).GetBus))
}

// GetEventMetricsAgent mocks base method.
func (m *MockTelemetryModule) GetEventMetricsAgent() modules.EventMetricsAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventMetricsAgent")
	ret0, _ := ret[0].(modules.EventMetricsAgent)
	return ret0
}

// GetEventMetricsAgent indicates an expected call of GetEventMetricsAgent.
func (mr *MockTelemetryModuleMockRecorder) GetEventMetricsAgent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventMetricsAgent", reflect.TypeOf((*MockTelemetryModule)(nil).GetEventMetricsAgent))
}

// GetModuleName mocks base method.
func (m *MockTelemetryModule) GetModuleName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetModuleName indicates an expected call of GetModuleName.
func (mr *MockTelemetryModuleMockRecorder) GetModuleName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleName", reflect.TypeOf((*MockTelemetryModule)(nil).GetModuleName))
}

// GetTimeSeriesAgent mocks base method.
func (m *MockTelemetryModule) GetTimeSeriesAgent() modules.TimeSeriesAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeSeriesAgent")
	ret0, _ := ret[0].(modules.TimeSeriesAgent)
	return ret0
}

// GetTimeSeriesAgent indicates an expected call of GetTimeSeriesAgent.
func (mr *MockTelemetryModuleMockRecorder) GetTimeSeriesAgent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeSeriesAgent", reflect.TypeOf((*MockTelemetryModule)(nil).GetTimeSeriesAgent))
}

// SetBus mocks base method.
func (m *MockTelemetryModule) SetBus(arg0 modules.Bus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBus", arg0)
}

// SetBus indicates an expected call of SetBus.
func (mr *MockTelemetryModuleMockRecorder) SetBus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBus", reflect.TypeOf((*MockTelemetryModule)(nil).SetBus), arg0)
}

// Start mocks base method.
func (m *MockTelemetryModule) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockTelemetryModuleMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTelemetryModule)(nil).Start))
}

// Stop mocks base method.
func (m *MockTelemetryModule) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockTelemetryModuleMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTelemetryModule)(nil).Stop))
}

// ValidateConfig mocks base method.
func (m *MockTelemetryModule) ValidateConfig(arg0 modules.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateConfig indicates an expected call of ValidateConfig.
func (mr *MockTelemetryModuleMockRecorder) ValidateConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfig", reflect.TypeOf((*MockTelemetryModule)(nil).ValidateConfig), arg0)
}

// MockTimeSeriesAgent is a mock of TimeSeriesAgent interface.
type MockTimeSeriesAgent struct {
	ctrl     *gomock.Controller
	recorder *MockTimeSeriesAgentMockRecorder
}

// MockTimeSeriesAgentMockRecorder is the mock recorder for MockTimeSeriesAgent.
type MockTimeSeriesAgentMockRecorder struct {
	mock *MockTimeSeriesAgent
}

// NewMockTimeSeriesAgent creates a new mock instance.
func NewMockTimeSeriesAgent(ctrl *gomock.Controller) *MockTimeSeriesAgent {
	mock := &MockTimeSeriesAgent{ctrl: ctrl}
	mock.recorder = &MockTimeSeriesAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeSeriesAgent) EXPECT() *MockTimeSeriesAgentMockRecorder {
	return m.recorder
}

// CounterIncrement mocks base method.
func (m *MockTimeSeriesAgent) CounterIncrement(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CounterIncrement", name)
}

// CounterIncrement indicates an expected call of CounterIncrement.
func (mr *MockTimeSeriesAgentMockRecorder) CounterIncrement(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CounterIncrement", reflect.TypeOf((*MockTimeSeriesAgent)(nil).CounterIncrement), name)
}

// CounterRegister mocks base method.
func (m *MockTimeSeriesAgent) CounterRegister(name, description string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CounterRegister", name, description)
}

// CounterRegister indicates an expected call of CounterRegister.
func (mr *MockTimeSeriesAgentMockRecorder) CounterRegister(name, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CounterRegister", reflect.TypeOf((*MockTimeSeriesAgent)(nil).CounterRegister), name, description)
}

// GaugeAdd mocks base method.
func (m *MockTimeSeriesAgent) GaugeAdd(name string, value float64) (prometheus.Gauge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GaugeAdd", name, value)
	ret0, _ := ret[0].(prometheus.Gauge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GaugeAdd indicates an expected call of GaugeAdd.
func (mr *MockTimeSeriesAgentMockRecorder) GaugeAdd(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GaugeAdd", reflect.TypeOf((*MockTimeSeriesAgent)(nil).GaugeAdd), name, value)
}

// GaugeDecrement mocks base method.
func (m *MockTimeSeriesAgent) GaugeDecrement(name string) (prometheus.Gauge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GaugeDecrement", name)
	ret0, _ := ret[0].(prometheus.Gauge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GaugeDecrement indicates an expected call of GaugeDecrement.
func (mr *MockTimeSeriesAgentMockRecorder) GaugeDecrement(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GaugeDecrement", reflect.TypeOf((*MockTimeSeriesAgent)(nil).GaugeDecrement), name)
}

// GaugeIncrement mocks base method.
func (m *MockTimeSeriesAgent) GaugeIncrement(name string) (prometheus.Gauge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GaugeIncrement", name)
	ret0, _ := ret[0].(prometheus.Gauge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GaugeIncrement indicates an expected call of GaugeIncrement.
func (mr *MockTimeSeriesAgentMockRecorder) GaugeIncrement(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GaugeIncrement", reflect.TypeOf((*MockTimeSeriesAgent)(nil).GaugeIncrement), name)
}

// GaugeRegister mocks base method.
func (m *MockTimeSeriesAgent) GaugeRegister(name, description string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GaugeRegister", name, description)
}

// GaugeRegister indicates an expected call of GaugeRegister.
func (mr *MockTimeSeriesAgentMockRecorder) GaugeRegister(name, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GaugeRegister", reflect.TypeOf((*MockTimeSeriesAgent)(nil).GaugeRegister), name, description)
}

// GaugeSet mocks base method.
func (m *MockTimeSeriesAgent) GaugeSet(name string, value float64) (prometheus.Gauge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GaugeSet", name, value)
	ret0, _ := ret[0].(prometheus.Gauge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GaugeSet indicates an expected call of GaugeSet.
func (mr *MockTimeSeriesAgentMockRecorder) GaugeSet(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GaugeSet", reflect.TypeOf((*MockTimeSeriesAgent)(nil).GaugeSet), name, value)
}

// GaugeSub mocks base method.
func (m *MockTimeSeriesAgent) GaugeSub(name string, value float64) (prometheus.Gauge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GaugeSub", name, value)
	ret0, _ := ret[0].(prometheus.Gauge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GaugeSub indicates an expected call of GaugeSub.
func (mr *MockTimeSeriesAgentMockRecorder) GaugeSub(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GaugeSub", reflect.TypeOf((*MockTimeSeriesAgent)(nil).GaugeSub), name, value)
}

// GaugeVecRegister mocks base method.
func (m *MockTimeSeriesAgent) GaugeVecRegister(namespace, module, name, description string, labels []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GaugeVecRegister", namespace, module, name, description, labels)
}

// GaugeVecRegister indicates an expected call of GaugeVecRegister.
func (mr *MockTimeSeriesAgentMockRecorder) GaugeVecRegister(namespace, module, name, description, labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GaugeVecRegister", reflect.TypeOf((*MockTimeSeriesAgent)(nil).GaugeVecRegister), namespace, module, name, description, labels)
}

// GetGaugeVec mocks base method.
func (m *MockTimeSeriesAgent) GetGaugeVec(name string) (prometheus.GaugeVec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGaugeVec", name)
	ret0, _ := ret[0].(prometheus.GaugeVec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGaugeVec indicates an expected call of GetGaugeVec.
func (mr *MockTimeSeriesAgentMockRecorder) GetGaugeVec(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGaugeVec", reflect.TypeOf((*MockTimeSeriesAgent)(nil).GetGaugeVec), name)
}

// MockEventMetricsAgent is a mock of EventMetricsAgent interface.
type MockEventMetricsAgent struct {
	ctrl     *gomock.Controller
	recorder *MockEventMetricsAgentMockRecorder
}

// MockEventMetricsAgentMockRecorder is the mock recorder for MockEventMetricsAgent.
type MockEventMetricsAgentMockRecorder struct {
	mock *MockEventMetricsAgent
}

// NewMockEventMetricsAgent creates a new mock instance.
func NewMockEventMetricsAgent(ctrl *gomock.Controller) *MockEventMetricsAgent {
	mock := &MockEventMetricsAgent{ctrl: ctrl}
	mock.recorder = &MockEventMetricsAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventMetricsAgent) EXPECT() *MockEventMetricsAgentMockRecorder {
	return m.recorder
}

// EmitEvent mocks base method.
func (m *MockEventMetricsAgent) EmitEvent(namespace, event_name string, labels ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{namespace, event_name}
	for _, a := range labels {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "EmitEvent", varargs...)
}

// EmitEvent indicates an expected call of EmitEvent.
func (mr *MockEventMetricsAgentMockRecorder) EmitEvent(namespace, event_name interface{}, labels ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{namespace, event_name}, labels...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitEvent", reflect.TypeOf((*MockEventMetricsAgent)(nil).EmitEvent), varargs...)
}
