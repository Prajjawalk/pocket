// Code generated by MockGen. DO NOT EDIT.
// Source: persistence_module.go

// Package mock_modules is a generated GoMock package.
package mock_modules

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kvstore "github.com/pokt-network/pocket/internal/persistence/kvstore"
	messaging "github.com/pokt-network/pocket/internal/shared/messaging"
	modules "github.com/pokt-network/pocket/internal/shared/modules"
)

// MockPersistenceModule is a mock of PersistenceModule interface.
type MockPersistenceModule struct {
	ctrl     *gomock.Controller
	recorder *MockPersistenceModuleMockRecorder
}

// MockPersistenceModuleMockRecorder is the mock recorder for MockPersistenceModule.
type MockPersistenceModuleMockRecorder struct {
	mock *MockPersistenceModule
}

// NewMockPersistenceModule creates a new mock instance.
func NewMockPersistenceModule(ctrl *gomock.Controller) *MockPersistenceModule {
	mock := &MockPersistenceModule{ctrl: ctrl}
	mock.recorder = &MockPersistenceModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersistenceModule) EXPECT() *MockPersistenceModuleMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPersistenceModule) Create(runtime modules.RuntimeMgr) (modules.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", runtime)
	ret0, _ := ret[0].(modules.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPersistenceModuleMockRecorder) Create(runtime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPersistenceModule)(nil).Create), runtime)
}

// GetBlockStore mocks base method.
func (m *MockPersistenceModule) GetBlockStore() kvstore.KVStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockStore")
	ret0, _ := ret[0].(kvstore.KVStore)
	return ret0
}

// GetBlockStore indicates an expected call of GetBlockStore.
func (mr *MockPersistenceModuleMockRecorder) GetBlockStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockStore", reflect.TypeOf((*MockPersistenceModule)(nil).GetBlockStore))
}

// GetBus mocks base method.
func (m *MockPersistenceModule) GetBus() modules.Bus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBus")
	ret0, _ := ret[0].(modules.Bus)
	return ret0
}

// GetBus indicates an expected call of GetBus.
func (mr *MockPersistenceModuleMockRecorder) GetBus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBus", reflect.TypeOf((*MockPersistenceModule)(nil).GetBus))
}

// GetModuleName mocks base method.
func (m *MockPersistenceModule) GetModuleName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetModuleName indicates an expected call of GetModuleName.
func (mr *MockPersistenceModuleMockRecorder) GetModuleName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleName", reflect.TypeOf((*MockPersistenceModule)(nil).GetModuleName))
}

// HandleDebugMessage mocks base method.
func (m *MockPersistenceModule) HandleDebugMessage(arg0 *messaging.DebugMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleDebugMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleDebugMessage indicates an expected call of HandleDebugMessage.
func (mr *MockPersistenceModuleMockRecorder) HandleDebugMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDebugMessage", reflect.TypeOf((*MockPersistenceModule)(nil).HandleDebugMessage), arg0)
}

// NewRWContext mocks base method.
func (m *MockPersistenceModule) NewRWContext(height int64) (modules.PersistenceRWContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRWContext", height)
	ret0, _ := ret[0].(modules.PersistenceRWContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRWContext indicates an expected call of NewRWContext.
func (mr *MockPersistenceModuleMockRecorder) NewRWContext(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRWContext", reflect.TypeOf((*MockPersistenceModule)(nil).NewRWContext), height)
}

// NewReadContext mocks base method.
func (m *MockPersistenceModule) NewReadContext(height int64) (modules.PersistenceReadContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewReadContext", height)
	ret0, _ := ret[0].(modules.PersistenceReadContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewReadContext indicates an expected call of NewReadContext.
func (mr *MockPersistenceModuleMockRecorder) NewReadContext(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewReadContext", reflect.TypeOf((*MockPersistenceModule)(nil).NewReadContext), height)
}

// NewWriteContext mocks base method.
func (m *MockPersistenceModule) NewWriteContext() modules.PersistenceRWContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewWriteContext")
	ret0, _ := ret[0].(modules.PersistenceRWContext)
	return ret0
}

// NewWriteContext indicates an expected call of NewWriteContext.
func (mr *MockPersistenceModuleMockRecorder) NewWriteContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWriteContext", reflect.TypeOf((*MockPersistenceModule)(nil).NewWriteContext))
}

// ReleaseWriteContext mocks base method.
func (m *MockPersistenceModule) ReleaseWriteContext() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseWriteContext")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseWriteContext indicates an expected call of ReleaseWriteContext.
func (mr *MockPersistenceModuleMockRecorder) ReleaseWriteContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseWriteContext", reflect.TypeOf((*MockPersistenceModule)(nil).ReleaseWriteContext))
}

// SetBus mocks base method.
func (m *MockPersistenceModule) SetBus(arg0 modules.Bus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBus", arg0)
}

// SetBus indicates an expected call of SetBus.
func (mr *MockPersistenceModuleMockRecorder) SetBus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBus", reflect.TypeOf((*MockPersistenceModule)(nil).SetBus), arg0)
}

// Start mocks base method.
func (m *MockPersistenceModule) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockPersistenceModuleMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockPersistenceModule)(nil).Start))
}

// Stop mocks base method.
func (m *MockPersistenceModule) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockPersistenceModuleMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockPersistenceModule)(nil).Stop))
}

// TransactionExists mocks base method.
func (m *MockPersistenceModule) TransactionExists(transactionHash string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionExists", transactionHash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactionExists indicates an expected call of TransactionExists.
func (mr *MockPersistenceModuleMockRecorder) TransactionExists(transactionHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionExists", reflect.TypeOf((*MockPersistenceModule)(nil).TransactionExists), transactionHash)
}

// ValidateConfig mocks base method.
func (m *MockPersistenceModule) ValidateConfig(arg0 modules.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateConfig indicates an expected call of ValidateConfig.
func (mr *MockPersistenceModuleMockRecorder) ValidateConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfig", reflect.TypeOf((*MockPersistenceModule)(nil).ValidateConfig), arg0)
}

// ValidateGenesis mocks base method.
func (m *MockPersistenceModule) ValidateGenesis(arg0 modules.GenesisState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateGenesis", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateGenesis indicates an expected call of ValidateGenesis.
func (mr *MockPersistenceModuleMockRecorder) ValidateGenesis(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateGenesis", reflect.TypeOf((*MockPersistenceModule)(nil).ValidateGenesis), arg0)
}

// MockPersistenceRWContext is a mock of PersistenceRWContext interface.
type MockPersistenceRWContext struct {
	ctrl     *gomock.Controller
	recorder *MockPersistenceRWContextMockRecorder
}

// MockPersistenceRWContextMockRecorder is the mock recorder for MockPersistenceRWContext.
type MockPersistenceRWContextMockRecorder struct {
	mock *MockPersistenceRWContext
}

// NewMockPersistenceRWContext creates a new mock instance.
func NewMockPersistenceRWContext(ctrl *gomock.Controller) *MockPersistenceRWContext {
	mock := &MockPersistenceRWContext{ctrl: ctrl}
	mock.recorder = &MockPersistenceRWContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersistenceRWContext) EXPECT() *MockPersistenceRWContextMockRecorder {
	return m.recorder
}

// AddAccountAmount mocks base method.
func (m *MockPersistenceRWContext) AddAccountAmount(address []byte, amount string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccountAmount", address, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAccountAmount indicates an expected call of AddAccountAmount.
func (mr *MockPersistenceRWContextMockRecorder) AddAccountAmount(address, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccountAmount", reflect.TypeOf((*MockPersistenceRWContext)(nil).AddAccountAmount), address, amount)
}

// AddPoolAmount mocks base method.
func (m *MockPersistenceRWContext) AddPoolAmount(name, amount string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPoolAmount", name, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPoolAmount indicates an expected call of AddPoolAmount.
func (mr *MockPersistenceRWContextMockRecorder) AddPoolAmount(name, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPoolAmount", reflect.TypeOf((*MockPersistenceRWContext)(nil).AddPoolAmount), name, amount)
}

// Close mocks base method.
func (m *MockPersistenceRWContext) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPersistenceRWContextMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPersistenceRWContext)(nil).Close))
}

// Commit mocks base method.
func (m *MockPersistenceRWContext) Commit(quorumCert []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", quorumCert)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockPersistenceRWContextMockRecorder) Commit(quorumCert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockPersistenceRWContext)(nil).Commit), quorumCert)
}

// ComputeAppHash mocks base method.
func (m *MockPersistenceRWContext) ComputeAppHash() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeAppHash")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComputeAppHash indicates an expected call of ComputeAppHash.
func (mr *MockPersistenceRWContextMockRecorder) ComputeAppHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeAppHash", reflect.TypeOf((*MockPersistenceRWContext)(nil).ComputeAppHash))
}

// GetAccountAmount mocks base method.
func (m *MockPersistenceRWContext) GetAccountAmount(address []byte, height int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountAmount", address, height)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountAmount indicates an expected call of GetAccountAmount.
func (mr *MockPersistenceRWContextMockRecorder) GetAccountAmount(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountAmount", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetAccountAmount), address, height)
}

// GetAllAccounts mocks base method.
func (m *MockPersistenceRWContext) GetAllAccounts(height int64) ([]modules.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAccounts", height)
	ret0, _ := ret[0].([]modules.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAccounts indicates an expected call of GetAllAccounts.
func (mr *MockPersistenceRWContextMockRecorder) GetAllAccounts(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAccounts", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetAllAccounts), height)
}

// GetAllApps mocks base method.
func (m *MockPersistenceRWContext) GetAllApps(height int64) ([]modules.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllApps", height)
	ret0, _ := ret[0].([]modules.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllApps indicates an expected call of GetAllApps.
func (mr *MockPersistenceRWContextMockRecorder) GetAllApps(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllApps", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetAllApps), height)
}

// GetAllFishermen mocks base method.
func (m *MockPersistenceRWContext) GetAllFishermen(height int64) ([]modules.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFishermen", height)
	ret0, _ := ret[0].([]modules.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFishermen indicates an expected call of GetAllFishermen.
func (mr *MockPersistenceRWContextMockRecorder) GetAllFishermen(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFishermen", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetAllFishermen), height)
}

// GetAllPools mocks base method.
func (m *MockPersistenceRWContext) GetAllPools(height int64) ([]modules.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPools", height)
	ret0, _ := ret[0].([]modules.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPools indicates an expected call of GetAllPools.
func (mr *MockPersistenceRWContextMockRecorder) GetAllPools(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPools", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetAllPools), height)
}

// GetAllServiceNodes mocks base method.
func (m *MockPersistenceRWContext) GetAllServiceNodes(height int64) ([]modules.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllServiceNodes", height)
	ret0, _ := ret[0].([]modules.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllServiceNodes indicates an expected call of GetAllServiceNodes.
func (mr *MockPersistenceRWContextMockRecorder) GetAllServiceNodes(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllServiceNodes", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetAllServiceNodes), height)
}

// GetAllValidators mocks base method.
func (m *MockPersistenceRWContext) GetAllValidators(height int64) ([]modules.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllValidators", height)
	ret0, _ := ret[0].([]modules.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllValidators indicates an expected call of GetAllValidators.
func (mr *MockPersistenceRWContextMockRecorder) GetAllValidators(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllValidators", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetAllValidators), height)
}

// GetAppExists mocks base method.
func (m *MockPersistenceRWContext) GetAppExists(address []byte, height int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppExists", address, height)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppExists indicates an expected call of GetAppExists.
func (mr *MockPersistenceRWContextMockRecorder) GetAppExists(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppExists", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetAppExists), address, height)
}

// GetAppOutputAddress mocks base method.
func (m *MockPersistenceRWContext) GetAppOutputAddress(operator []byte, height int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppOutputAddress", operator, height)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppOutputAddress indicates an expected call of GetAppOutputAddress.
func (mr *MockPersistenceRWContextMockRecorder) GetAppOutputAddress(operator, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppOutputAddress", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetAppOutputAddress), operator, height)
}

// GetAppPauseHeightIfExists mocks base method.
func (m *MockPersistenceRWContext) GetAppPauseHeightIfExists(address []byte, height int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppPauseHeightIfExists", address, height)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppPauseHeightIfExists indicates an expected call of GetAppPauseHeightIfExists.
func (mr *MockPersistenceRWContextMockRecorder) GetAppPauseHeightIfExists(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppPauseHeightIfExists", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetAppPauseHeightIfExists), address, height)
}

// GetAppStakeAmount mocks base method.
func (m *MockPersistenceRWContext) GetAppStakeAmount(height int64, address []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppStakeAmount", height, address)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppStakeAmount indicates an expected call of GetAppStakeAmount.
func (mr *MockPersistenceRWContextMockRecorder) GetAppStakeAmount(height, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppStakeAmount", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetAppStakeAmount), height, address)
}

// GetAppStatus mocks base method.
func (m *MockPersistenceRWContext) GetAppStatus(address []byte, height int64) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppStatus", address, height)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppStatus indicates an expected call of GetAppStatus.
func (mr *MockPersistenceRWContextMockRecorder) GetAppStatus(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppStatus", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetAppStatus), address, height)
}

// GetAppsReadyToUnstake mocks base method.
func (m *MockPersistenceRWContext) GetAppsReadyToUnstake(height int64, status int32) ([]modules.IUnstakingActor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppsReadyToUnstake", height, status)
	ret0, _ := ret[0].([]modules.IUnstakingActor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppsReadyToUnstake indicates an expected call of GetAppsReadyToUnstake.
func (mr *MockPersistenceRWContextMockRecorder) GetAppsReadyToUnstake(height, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppsReadyToUnstake", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetAppsReadyToUnstake), height, status)
}

// GetBlockHash mocks base method.
func (m *MockPersistenceRWContext) GetBlockHash(height int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHash", height)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHash indicates an expected call of GetBlockHash.
func (mr *MockPersistenceRWContextMockRecorder) GetBlockHash(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHash", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetBlockHash), height)
}

// GetBlockTxs mocks base method.
func (m *MockPersistenceRWContext) GetBlockTxs() [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockTxs")
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// GetBlockTxs indicates an expected call of GetBlockTxs.
func (mr *MockPersistenceRWContextMockRecorder) GetBlockTxs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockTxs", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetBlockTxs))
}

// GetBlocksPerSession mocks base method.
func (m *MockPersistenceRWContext) GetBlocksPerSession(height int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlocksPerSession", height)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlocksPerSession indicates an expected call of GetBlocksPerSession.
func (mr *MockPersistenceRWContextMockRecorder) GetBlocksPerSession(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlocksPerSession", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetBlocksPerSession), height)
}

// GetBytesFlag mocks base method.
func (m *MockPersistenceRWContext) GetBytesFlag(paramName string, height int64) ([]byte, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBytesFlag", paramName, height)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBytesFlag indicates an expected call of GetBytesFlag.
func (mr *MockPersistenceRWContextMockRecorder) GetBytesFlag(paramName, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBytesFlag", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetBytesFlag), paramName, height)
}

// GetBytesParam mocks base method.
func (m *MockPersistenceRWContext) GetBytesParam(paramName string, height int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBytesParam", paramName, height)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBytesParam indicates an expected call of GetBytesParam.
func (mr *MockPersistenceRWContextMockRecorder) GetBytesParam(paramName, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBytesParam", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetBytesParam), paramName, height)
}

// GetFishermanExists mocks base method.
func (m *MockPersistenceRWContext) GetFishermanExists(address []byte, height int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFishermanExists", address, height)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFishermanExists indicates an expected call of GetFishermanExists.
func (mr *MockPersistenceRWContextMockRecorder) GetFishermanExists(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFishermanExists", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetFishermanExists), address, height)
}

// GetFishermanOutputAddress mocks base method.
func (m *MockPersistenceRWContext) GetFishermanOutputAddress(operator []byte, height int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFishermanOutputAddress", operator, height)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFishermanOutputAddress indicates an expected call of GetFishermanOutputAddress.
func (mr *MockPersistenceRWContextMockRecorder) GetFishermanOutputAddress(operator, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFishermanOutputAddress", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetFishermanOutputAddress), operator, height)
}

// GetFishermanPauseHeightIfExists mocks base method.
func (m *MockPersistenceRWContext) GetFishermanPauseHeightIfExists(address []byte, height int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFishermanPauseHeightIfExists", address, height)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFishermanPauseHeightIfExists indicates an expected call of GetFishermanPauseHeightIfExists.
func (mr *MockPersistenceRWContextMockRecorder) GetFishermanPauseHeightIfExists(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFishermanPauseHeightIfExists", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetFishermanPauseHeightIfExists), address, height)
}

// GetFishermanStakeAmount mocks base method.
func (m *MockPersistenceRWContext) GetFishermanStakeAmount(height int64, address []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFishermanStakeAmount", height, address)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFishermanStakeAmount indicates an expected call of GetFishermanStakeAmount.
func (mr *MockPersistenceRWContextMockRecorder) GetFishermanStakeAmount(height, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFishermanStakeAmount", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetFishermanStakeAmount), height, address)
}

// GetFishermanStatus mocks base method.
func (m *MockPersistenceRWContext) GetFishermanStatus(address []byte, height int64) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFishermanStatus", address, height)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFishermanStatus indicates an expected call of GetFishermanStatus.
func (mr *MockPersistenceRWContextMockRecorder) GetFishermanStatus(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFishermanStatus", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetFishermanStatus), address, height)
}

// GetFishermenReadyToUnstake mocks base method.
func (m *MockPersistenceRWContext) GetFishermenReadyToUnstake(height int64, status int32) ([]modules.IUnstakingActor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFishermenReadyToUnstake", height, status)
	ret0, _ := ret[0].([]modules.IUnstakingActor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFishermenReadyToUnstake indicates an expected call of GetFishermenReadyToUnstake.
func (mr *MockPersistenceRWContextMockRecorder) GetFishermenReadyToUnstake(height, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFishermenReadyToUnstake", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetFishermenReadyToUnstake), height, status)
}

// GetHeight mocks base method.
func (m *MockPersistenceRWContext) GetHeight() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeight")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeight indicates an expected call of GetHeight.
func (mr *MockPersistenceRWContextMockRecorder) GetHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeight", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetHeight))
}

// GetIntFlag mocks base method.
func (m *MockPersistenceRWContext) GetIntFlag(paramName string, height int64) (int, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntFlag", paramName, height)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIntFlag indicates an expected call of GetIntFlag.
func (mr *MockPersistenceRWContextMockRecorder) GetIntFlag(paramName, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntFlag", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetIntFlag), paramName, height)
}

// GetIntParam mocks base method.
func (m *MockPersistenceRWContext) GetIntParam(paramName string, height int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntParam", paramName, height)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntParam indicates an expected call of GetIntParam.
func (mr *MockPersistenceRWContextMockRecorder) GetIntParam(paramName, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntParam", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetIntParam), paramName, height)
}

// GetLatestBlockHeight mocks base method.
func (m *MockPersistenceRWContext) GetLatestBlockHeight() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestBlockHeight")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestBlockHeight indicates an expected call of GetLatestBlockHeight.
func (mr *MockPersistenceRWContextMockRecorder) GetLatestBlockHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBlockHeight", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetLatestBlockHeight))
}

// GetPoolAmount mocks base method.
func (m *MockPersistenceRWContext) GetPoolAmount(name string, height int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoolAmount", name, height)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPoolAmount indicates an expected call of GetPoolAmount.
func (mr *MockPersistenceRWContextMockRecorder) GetPoolAmount(name, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoolAmount", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetPoolAmount), name, height)
}

// GetProposerAddr mocks base method.
func (m *MockPersistenceRWContext) GetProposerAddr() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposerAddr")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetProposerAddr indicates an expected call of GetProposerAddr.
func (mr *MockPersistenceRWContextMockRecorder) GetProposerAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposerAddr", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetProposerAddr))
}

// GetServiceNodeCount mocks base method.
func (m *MockPersistenceRWContext) GetServiceNodeCount(chain string, height int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNodeCount", chain, height)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceNodeCount indicates an expected call of GetServiceNodeCount.
func (mr *MockPersistenceRWContextMockRecorder) GetServiceNodeCount(chain, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNodeCount", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetServiceNodeCount), chain, height)
}

// GetServiceNodeExists mocks base method.
func (m *MockPersistenceRWContext) GetServiceNodeExists(address []byte, height int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNodeExists", address, height)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceNodeExists indicates an expected call of GetServiceNodeExists.
func (mr *MockPersistenceRWContextMockRecorder) GetServiceNodeExists(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNodeExists", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetServiceNodeExists), address, height)
}

// GetServiceNodeOutputAddress mocks base method.
func (m *MockPersistenceRWContext) GetServiceNodeOutputAddress(operator []byte, height int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNodeOutputAddress", operator, height)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceNodeOutputAddress indicates an expected call of GetServiceNodeOutputAddress.
func (mr *MockPersistenceRWContextMockRecorder) GetServiceNodeOutputAddress(operator, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNodeOutputAddress", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetServiceNodeOutputAddress), operator, height)
}

// GetServiceNodePauseHeightIfExists mocks base method.
func (m *MockPersistenceRWContext) GetServiceNodePauseHeightIfExists(address []byte, height int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNodePauseHeightIfExists", address, height)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceNodePauseHeightIfExists indicates an expected call of GetServiceNodePauseHeightIfExists.
func (mr *MockPersistenceRWContextMockRecorder) GetServiceNodePauseHeightIfExists(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNodePauseHeightIfExists", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetServiceNodePauseHeightIfExists), address, height)
}

// GetServiceNodeStakeAmount mocks base method.
func (m *MockPersistenceRWContext) GetServiceNodeStakeAmount(height int64, address []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNodeStakeAmount", height, address)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceNodeStakeAmount indicates an expected call of GetServiceNodeStakeAmount.
func (mr *MockPersistenceRWContextMockRecorder) GetServiceNodeStakeAmount(height, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNodeStakeAmount", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetServiceNodeStakeAmount), height, address)
}

// GetServiceNodeStatus mocks base method.
func (m *MockPersistenceRWContext) GetServiceNodeStatus(address []byte, height int64) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNodeStatus", address, height)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceNodeStatus indicates an expected call of GetServiceNodeStatus.
func (mr *MockPersistenceRWContextMockRecorder) GetServiceNodeStatus(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNodeStatus", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetServiceNodeStatus), address, height)
}

// GetServiceNodesPerSessionAt mocks base method.
func (m *MockPersistenceRWContext) GetServiceNodesPerSessionAt(height int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNodesPerSessionAt", height)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceNodesPerSessionAt indicates an expected call of GetServiceNodesPerSessionAt.
func (mr *MockPersistenceRWContextMockRecorder) GetServiceNodesPerSessionAt(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNodesPerSessionAt", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetServiceNodesPerSessionAt), height)
}

// GetServiceNodesReadyToUnstake mocks base method.
func (m *MockPersistenceRWContext) GetServiceNodesReadyToUnstake(height int64, status int32) ([]modules.IUnstakingActor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNodesReadyToUnstake", height, status)
	ret0, _ := ret[0].([]modules.IUnstakingActor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceNodesReadyToUnstake indicates an expected call of GetServiceNodesReadyToUnstake.
func (mr *MockPersistenceRWContextMockRecorder) GetServiceNodesReadyToUnstake(height, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNodesReadyToUnstake", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetServiceNodesReadyToUnstake), height, status)
}

// GetStringFlag mocks base method.
func (m *MockPersistenceRWContext) GetStringFlag(paramName string, height int64) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringFlag", paramName, height)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStringFlag indicates an expected call of GetStringFlag.
func (mr *MockPersistenceRWContextMockRecorder) GetStringFlag(paramName, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringFlag", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetStringFlag), paramName, height)
}

// GetStringParam mocks base method.
func (m *MockPersistenceRWContext) GetStringParam(paramName string, height int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringParam", paramName, height)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStringParam indicates an expected call of GetStringParam.
func (mr *MockPersistenceRWContextMockRecorder) GetStringParam(paramName, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringParam", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetStringParam), paramName, height)
}

// GetValidatorExists mocks base method.
func (m *MockPersistenceRWContext) GetValidatorExists(address []byte, height int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorExists", address, height)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorExists indicates an expected call of GetValidatorExists.
func (mr *MockPersistenceRWContextMockRecorder) GetValidatorExists(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorExists", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetValidatorExists), address, height)
}

// GetValidatorMissedBlocks mocks base method.
func (m *MockPersistenceRWContext) GetValidatorMissedBlocks(address []byte, height int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorMissedBlocks", address, height)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorMissedBlocks indicates an expected call of GetValidatorMissedBlocks.
func (mr *MockPersistenceRWContextMockRecorder) GetValidatorMissedBlocks(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorMissedBlocks", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetValidatorMissedBlocks), address, height)
}

// GetValidatorOutputAddress mocks base method.
func (m *MockPersistenceRWContext) GetValidatorOutputAddress(operator []byte, height int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorOutputAddress", operator, height)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorOutputAddress indicates an expected call of GetValidatorOutputAddress.
func (mr *MockPersistenceRWContextMockRecorder) GetValidatorOutputAddress(operator, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorOutputAddress", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetValidatorOutputAddress), operator, height)
}

// GetValidatorPauseHeightIfExists mocks base method.
func (m *MockPersistenceRWContext) GetValidatorPauseHeightIfExists(address []byte, height int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorPauseHeightIfExists", address, height)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorPauseHeightIfExists indicates an expected call of GetValidatorPauseHeightIfExists.
func (mr *MockPersistenceRWContextMockRecorder) GetValidatorPauseHeightIfExists(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorPauseHeightIfExists", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetValidatorPauseHeightIfExists), address, height)
}

// GetValidatorStakeAmount mocks base method.
func (m *MockPersistenceRWContext) GetValidatorStakeAmount(height int64, address []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorStakeAmount", height, address)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorStakeAmount indicates an expected call of GetValidatorStakeAmount.
func (mr *MockPersistenceRWContextMockRecorder) GetValidatorStakeAmount(height, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorStakeAmount", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetValidatorStakeAmount), height, address)
}

// GetValidatorStatus mocks base method.
func (m *MockPersistenceRWContext) GetValidatorStatus(address []byte, height int64) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorStatus", address, height)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorStatus indicates an expected call of GetValidatorStatus.
func (mr *MockPersistenceRWContextMockRecorder) GetValidatorStatus(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorStatus", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetValidatorStatus), address, height)
}

// GetValidatorsReadyToUnstake mocks base method.
func (m *MockPersistenceRWContext) GetValidatorsReadyToUnstake(height int64, status int32) ([]modules.IUnstakingActor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorsReadyToUnstake", height, status)
	ret0, _ := ret[0].([]modules.IUnstakingActor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorsReadyToUnstake indicates an expected call of GetValidatorsReadyToUnstake.
func (mr *MockPersistenceRWContextMockRecorder) GetValidatorsReadyToUnstake(height, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorsReadyToUnstake", reflect.TypeOf((*MockPersistenceRWContext)(nil).GetValidatorsReadyToUnstake), height, status)
}

// IndexTransaction mocks base method.
func (m *MockPersistenceRWContext) IndexTransaction(txResult modules.TxResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexTransaction", txResult)
	ret0, _ := ret[0].(error)
	return ret0
}

// IndexTransaction indicates an expected call of IndexTransaction.
func (mr *MockPersistenceRWContextMockRecorder) IndexTransaction(txResult interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexTransaction", reflect.TypeOf((*MockPersistenceRWContext)(nil).IndexTransaction), txResult)
}

// InitFlags mocks base method.
func (m *MockPersistenceRWContext) InitFlags() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitFlags")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitFlags indicates an expected call of InitFlags.
func (mr *MockPersistenceRWContextMockRecorder) InitFlags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitFlags", reflect.TypeOf((*MockPersistenceRWContext)(nil).InitFlags))
}

// InitParams mocks base method.
func (m *MockPersistenceRWContext) InitParams() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitParams")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitParams indicates an expected call of InitParams.
func (mr *MockPersistenceRWContextMockRecorder) InitParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitParams", reflect.TypeOf((*MockPersistenceRWContext)(nil).InitParams))
}

// InsertApp mocks base method.
func (m *MockPersistenceRWContext) InsertApp(address, publicKey, output []byte, paused bool, status int32, maxRelays, stakedTokens string, chains []string, pausedHeight, unstakingHeight int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertApp", address, publicKey, output, paused, status, maxRelays, stakedTokens, chains, pausedHeight, unstakingHeight)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertApp indicates an expected call of InsertApp.
func (mr *MockPersistenceRWContextMockRecorder) InsertApp(address, publicKey, output, paused, status, maxRelays, stakedTokens, chains, pausedHeight, unstakingHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertApp", reflect.TypeOf((*MockPersistenceRWContext)(nil).InsertApp), address, publicKey, output, paused, status, maxRelays, stakedTokens, chains, pausedHeight, unstakingHeight)
}

// InsertFisherman mocks base method.
func (m *MockPersistenceRWContext) InsertFisherman(address, publicKey, output []byte, paused bool, status int32, serviceURL, stakedTokens string, chains []string, pausedHeight, unstakingHeight int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertFisherman", address, publicKey, output, paused, status, serviceURL, stakedTokens, chains, pausedHeight, unstakingHeight)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertFisherman indicates an expected call of InsertFisherman.
func (mr *MockPersistenceRWContextMockRecorder) InsertFisherman(address, publicKey, output, paused, status, serviceURL, stakedTokens, chains, pausedHeight, unstakingHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertFisherman", reflect.TypeOf((*MockPersistenceRWContext)(nil).InsertFisherman), address, publicKey, output, paused, status, serviceURL, stakedTokens, chains, pausedHeight, unstakingHeight)
}

// InsertPool mocks base method.
func (m *MockPersistenceRWContext) InsertPool(name string, address []byte, amount string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPool", name, address, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPool indicates an expected call of InsertPool.
func (mr *MockPersistenceRWContextMockRecorder) InsertPool(name, address, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPool", reflect.TypeOf((*MockPersistenceRWContext)(nil).InsertPool), name, address, amount)
}

// InsertServiceNode mocks base method.
func (m *MockPersistenceRWContext) InsertServiceNode(address, publicKey, output []byte, paused bool, status int32, serviceURL, stakedTokens string, chains []string, pausedHeight, unstakingHeight int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertServiceNode", address, publicKey, output, paused, status, serviceURL, stakedTokens, chains, pausedHeight, unstakingHeight)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertServiceNode indicates an expected call of InsertServiceNode.
func (mr *MockPersistenceRWContextMockRecorder) InsertServiceNode(address, publicKey, output, paused, status, serviceURL, stakedTokens, chains, pausedHeight, unstakingHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertServiceNode", reflect.TypeOf((*MockPersistenceRWContext)(nil).InsertServiceNode), address, publicKey, output, paused, status, serviceURL, stakedTokens, chains, pausedHeight, unstakingHeight)
}

// InsertValidator mocks base method.
func (m *MockPersistenceRWContext) InsertValidator(address, publicKey, output []byte, paused bool, status int32, serviceURL, stakedTokens string, pausedHeight, unstakingHeight int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertValidator", address, publicKey, output, paused, status, serviceURL, stakedTokens, pausedHeight, unstakingHeight)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertValidator indicates an expected call of InsertValidator.
func (mr *MockPersistenceRWContextMockRecorder) InsertValidator(address, publicKey, output, paused, status, serviceURL, stakedTokens, pausedHeight, unstakingHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertValidator", reflect.TypeOf((*MockPersistenceRWContext)(nil).InsertValidator), address, publicKey, output, paused, status, serviceURL, stakedTokens, pausedHeight, unstakingHeight)
}

// NewSavePoint mocks base method.
func (m *MockPersistenceRWContext) NewSavePoint(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSavePoint", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewSavePoint indicates an expected call of NewSavePoint.
func (mr *MockPersistenceRWContextMockRecorder) NewSavePoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSavePoint", reflect.TypeOf((*MockPersistenceRWContext)(nil).NewSavePoint), arg0)
}

// Release mocks base method.
func (m *MockPersistenceRWContext) Release() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release")
	ret0, _ := ret[0].(error)
	return ret0
}

// Release indicates an expected call of Release.
func (mr *MockPersistenceRWContextMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockPersistenceRWContext)(nil).Release))
}

// RollbackToSavePoint mocks base method.
func (m *MockPersistenceRWContext) RollbackToSavePoint(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackToSavePoint", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackToSavePoint indicates an expected call of RollbackToSavePoint.
func (mr *MockPersistenceRWContextMockRecorder) RollbackToSavePoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackToSavePoint", reflect.TypeOf((*MockPersistenceRWContext)(nil).RollbackToSavePoint), arg0)
}

// SetAccountAmount mocks base method.
func (m *MockPersistenceRWContext) SetAccountAmount(address []byte, amount string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccountAmount", address, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAccountAmount indicates an expected call of SetAccountAmount.
func (mr *MockPersistenceRWContextMockRecorder) SetAccountAmount(address, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccountAmount", reflect.TypeOf((*MockPersistenceRWContext)(nil).SetAccountAmount), address, amount)
}

// SetAppPauseHeight mocks base method.
func (m *MockPersistenceRWContext) SetAppPauseHeight(address []byte, height int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAppPauseHeight", address, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAppPauseHeight indicates an expected call of SetAppPauseHeight.
func (mr *MockPersistenceRWContextMockRecorder) SetAppPauseHeight(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAppPauseHeight", reflect.TypeOf((*MockPersistenceRWContext)(nil).SetAppPauseHeight), address, height)
}

// SetAppStakeAmount mocks base method.
func (m *MockPersistenceRWContext) SetAppStakeAmount(address []byte, stakeAmount string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAppStakeAmount", address, stakeAmount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAppStakeAmount indicates an expected call of SetAppStakeAmount.
func (mr *MockPersistenceRWContextMockRecorder) SetAppStakeAmount(address, stakeAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAppStakeAmount", reflect.TypeOf((*MockPersistenceRWContext)(nil).SetAppStakeAmount), address, stakeAmount)
}

// SetAppStatusAndUnstakingHeightIfPausedBefore mocks base method.
func (m *MockPersistenceRWContext) SetAppStatusAndUnstakingHeightIfPausedBefore(pausedBeforeHeight, unstakingHeight int64, status int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAppStatusAndUnstakingHeightIfPausedBefore", pausedBeforeHeight, unstakingHeight, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAppStatusAndUnstakingHeightIfPausedBefore indicates an expected call of SetAppStatusAndUnstakingHeightIfPausedBefore.
func (mr *MockPersistenceRWContextMockRecorder) SetAppStatusAndUnstakingHeightIfPausedBefore(pausedBeforeHeight, unstakingHeight, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAppStatusAndUnstakingHeightIfPausedBefore", reflect.TypeOf((*MockPersistenceRWContext)(nil).SetAppStatusAndUnstakingHeightIfPausedBefore), pausedBeforeHeight, unstakingHeight, status)
}

// SetAppUnstakingHeightAndStatus mocks base method.
func (m *MockPersistenceRWContext) SetAppUnstakingHeightAndStatus(address []byte, unstakingHeight int64, status int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAppUnstakingHeightAndStatus", address, unstakingHeight, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAppUnstakingHeightAndStatus indicates an expected call of SetAppUnstakingHeightAndStatus.
func (mr *MockPersistenceRWContextMockRecorder) SetAppUnstakingHeightAndStatus(address, unstakingHeight, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAppUnstakingHeightAndStatus", reflect.TypeOf((*MockPersistenceRWContext)(nil).SetAppUnstakingHeightAndStatus), address, unstakingHeight, status)
}

// SetFishermanPauseHeight mocks base method.
func (m *MockPersistenceRWContext) SetFishermanPauseHeight(address []byte, height int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFishermanPauseHeight", address, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFishermanPauseHeight indicates an expected call of SetFishermanPauseHeight.
func (mr *MockPersistenceRWContextMockRecorder) SetFishermanPauseHeight(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFishermanPauseHeight", reflect.TypeOf((*MockPersistenceRWContext)(nil).SetFishermanPauseHeight), address, height)
}

// SetFishermanStakeAmount mocks base method.
func (m *MockPersistenceRWContext) SetFishermanStakeAmount(address []byte, stakeAmount string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFishermanStakeAmount", address, stakeAmount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFishermanStakeAmount indicates an expected call of SetFishermanStakeAmount.
func (mr *MockPersistenceRWContextMockRecorder) SetFishermanStakeAmount(address, stakeAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFishermanStakeAmount", reflect.TypeOf((*MockPersistenceRWContext)(nil).SetFishermanStakeAmount), address, stakeAmount)
}

// SetFishermanStatusAndUnstakingHeightIfPausedBefore mocks base method.
func (m *MockPersistenceRWContext) SetFishermanStatusAndUnstakingHeightIfPausedBefore(pausedBeforeHeight, unstakingHeight int64, status int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFishermanStatusAndUnstakingHeightIfPausedBefore", pausedBeforeHeight, unstakingHeight, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFishermanStatusAndUnstakingHeightIfPausedBefore indicates an expected call of SetFishermanStatusAndUnstakingHeightIfPausedBefore.
func (mr *MockPersistenceRWContextMockRecorder) SetFishermanStatusAndUnstakingHeightIfPausedBefore(pausedBeforeHeight, unstakingHeight, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFishermanStatusAndUnstakingHeightIfPausedBefore", reflect.TypeOf((*MockPersistenceRWContext)(nil).SetFishermanStatusAndUnstakingHeightIfPausedBefore), pausedBeforeHeight, unstakingHeight, status)
}

// SetFishermanUnstakingHeightAndStatus mocks base method.
func (m *MockPersistenceRWContext) SetFishermanUnstakingHeightAndStatus(address []byte, unstakingHeight int64, status int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFishermanUnstakingHeightAndStatus", address, unstakingHeight, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFishermanUnstakingHeightAndStatus indicates an expected call of SetFishermanUnstakingHeightAndStatus.
func (mr *MockPersistenceRWContextMockRecorder) SetFishermanUnstakingHeightAndStatus(address, unstakingHeight, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFishermanUnstakingHeightAndStatus", reflect.TypeOf((*MockPersistenceRWContext)(nil).SetFishermanUnstakingHeightAndStatus), address, unstakingHeight, status)
}

// SetFlag mocks base method.
func (m *MockPersistenceRWContext) SetFlag(paramName string, value interface{}, enabled bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFlag", paramName, value, enabled)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFlag indicates an expected call of SetFlag.
func (mr *MockPersistenceRWContextMockRecorder) SetFlag(paramName, value, enabled interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFlag", reflect.TypeOf((*MockPersistenceRWContext)(nil).SetFlag), paramName, value, enabled)
}

// SetParam mocks base method.
func (m *MockPersistenceRWContext) SetParam(paramName string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetParam", paramName, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetParam indicates an expected call of SetParam.
func (mr *MockPersistenceRWContextMockRecorder) SetParam(paramName, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetParam", reflect.TypeOf((*MockPersistenceRWContext)(nil).SetParam), paramName, value)
}

// SetPoolAmount mocks base method.
func (m *MockPersistenceRWContext) SetPoolAmount(name, amount string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPoolAmount", name, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPoolAmount indicates an expected call of SetPoolAmount.
func (mr *MockPersistenceRWContextMockRecorder) SetPoolAmount(name, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPoolAmount", reflect.TypeOf((*MockPersistenceRWContext)(nil).SetPoolAmount), name, amount)
}

// SetProposalBlock mocks base method.
func (m *MockPersistenceRWContext) SetProposalBlock(blockHash string, proposerAddr, quorumCert []byte, transactions [][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProposalBlock", blockHash, proposerAddr, quorumCert, transactions)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProposalBlock indicates an expected call of SetProposalBlock.
func (mr *MockPersistenceRWContextMockRecorder) SetProposalBlock(blockHash, proposerAddr, quorumCert, transactions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProposalBlock", reflect.TypeOf((*MockPersistenceRWContext)(nil).SetProposalBlock), blockHash, proposerAddr, quorumCert, transactions)
}

// SetServiceNodePauseHeight mocks base method.
func (m *MockPersistenceRWContext) SetServiceNodePauseHeight(address []byte, height int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetServiceNodePauseHeight", address, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetServiceNodePauseHeight indicates an expected call of SetServiceNodePauseHeight.
func (mr *MockPersistenceRWContextMockRecorder) SetServiceNodePauseHeight(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServiceNodePauseHeight", reflect.TypeOf((*MockPersistenceRWContext)(nil).SetServiceNodePauseHeight), address, height)
}

// SetServiceNodeStakeAmount mocks base method.
func (m *MockPersistenceRWContext) SetServiceNodeStakeAmount(address []byte, stakeAmount string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetServiceNodeStakeAmount", address, stakeAmount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetServiceNodeStakeAmount indicates an expected call of SetServiceNodeStakeAmount.
func (mr *MockPersistenceRWContextMockRecorder) SetServiceNodeStakeAmount(address, stakeAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServiceNodeStakeAmount", reflect.TypeOf((*MockPersistenceRWContext)(nil).SetServiceNodeStakeAmount), address, stakeAmount)
}

// SetServiceNodeStatusAndUnstakingHeightIfPausedBefore mocks base method.
func (m *MockPersistenceRWContext) SetServiceNodeStatusAndUnstakingHeightIfPausedBefore(pausedBeforeHeight, unstakingHeight int64, status int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetServiceNodeStatusAndUnstakingHeightIfPausedBefore", pausedBeforeHeight, unstakingHeight, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetServiceNodeStatusAndUnstakingHeightIfPausedBefore indicates an expected call of SetServiceNodeStatusAndUnstakingHeightIfPausedBefore.
func (mr *MockPersistenceRWContextMockRecorder) SetServiceNodeStatusAndUnstakingHeightIfPausedBefore(pausedBeforeHeight, unstakingHeight, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServiceNodeStatusAndUnstakingHeightIfPausedBefore", reflect.TypeOf((*MockPersistenceRWContext)(nil).SetServiceNodeStatusAndUnstakingHeightIfPausedBefore), pausedBeforeHeight, unstakingHeight, status)
}

// SetServiceNodeUnstakingHeightAndStatus mocks base method.
func (m *MockPersistenceRWContext) SetServiceNodeUnstakingHeightAndStatus(address []byte, unstakingHeight int64, status int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetServiceNodeUnstakingHeightAndStatus", address, unstakingHeight, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetServiceNodeUnstakingHeightAndStatus indicates an expected call of SetServiceNodeUnstakingHeightAndStatus.
func (mr *MockPersistenceRWContextMockRecorder) SetServiceNodeUnstakingHeightAndStatus(address, unstakingHeight, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServiceNodeUnstakingHeightAndStatus", reflect.TypeOf((*MockPersistenceRWContext)(nil).SetServiceNodeUnstakingHeightAndStatus), address, unstakingHeight, status)
}

// SetValidatorMissedBlocks mocks base method.
func (m *MockPersistenceRWContext) SetValidatorMissedBlocks(address []byte, missedBlocks int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValidatorMissedBlocks", address, missedBlocks)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValidatorMissedBlocks indicates an expected call of SetValidatorMissedBlocks.
func (mr *MockPersistenceRWContextMockRecorder) SetValidatorMissedBlocks(address, missedBlocks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidatorMissedBlocks", reflect.TypeOf((*MockPersistenceRWContext)(nil).SetValidatorMissedBlocks), address, missedBlocks)
}

// SetValidatorPauseHeight mocks base method.
func (m *MockPersistenceRWContext) SetValidatorPauseHeight(address []byte, height int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValidatorPauseHeight", address, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValidatorPauseHeight indicates an expected call of SetValidatorPauseHeight.
func (mr *MockPersistenceRWContextMockRecorder) SetValidatorPauseHeight(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidatorPauseHeight", reflect.TypeOf((*MockPersistenceRWContext)(nil).SetValidatorPauseHeight), address, height)
}

// SetValidatorPauseHeightAndMissedBlocks mocks base method.
func (m *MockPersistenceRWContext) SetValidatorPauseHeightAndMissedBlocks(address []byte, pauseHeight int64, missedBlocks int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValidatorPauseHeightAndMissedBlocks", address, pauseHeight, missedBlocks)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValidatorPauseHeightAndMissedBlocks indicates an expected call of SetValidatorPauseHeightAndMissedBlocks.
func (mr *MockPersistenceRWContextMockRecorder) SetValidatorPauseHeightAndMissedBlocks(address, pauseHeight, missedBlocks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidatorPauseHeightAndMissedBlocks", reflect.TypeOf((*MockPersistenceRWContext)(nil).SetValidatorPauseHeightAndMissedBlocks), address, pauseHeight, missedBlocks)
}

// SetValidatorStakeAmount mocks base method.
func (m *MockPersistenceRWContext) SetValidatorStakeAmount(address []byte, stakeAmount string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValidatorStakeAmount", address, stakeAmount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValidatorStakeAmount indicates an expected call of SetValidatorStakeAmount.
func (mr *MockPersistenceRWContextMockRecorder) SetValidatorStakeAmount(address, stakeAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidatorStakeAmount", reflect.TypeOf((*MockPersistenceRWContext)(nil).SetValidatorStakeAmount), address, stakeAmount)
}

// SetValidatorUnstakingHeightAndStatus mocks base method.
func (m *MockPersistenceRWContext) SetValidatorUnstakingHeightAndStatus(address []byte, unstakingHeight int64, status int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValidatorUnstakingHeightAndStatus", address, unstakingHeight, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValidatorUnstakingHeightAndStatus indicates an expected call of SetValidatorUnstakingHeightAndStatus.
func (mr *MockPersistenceRWContextMockRecorder) SetValidatorUnstakingHeightAndStatus(address, unstakingHeight, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidatorUnstakingHeightAndStatus", reflect.TypeOf((*MockPersistenceRWContext)(nil).SetValidatorUnstakingHeightAndStatus), address, unstakingHeight, status)
}

// SetValidatorsStatusAndUnstakingHeightIfPausedBefore mocks base method.
func (m *MockPersistenceRWContext) SetValidatorsStatusAndUnstakingHeightIfPausedBefore(pausedBeforeHeight, unstakingHeight int64, status int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValidatorsStatusAndUnstakingHeightIfPausedBefore", pausedBeforeHeight, unstakingHeight, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValidatorsStatusAndUnstakingHeightIfPausedBefore indicates an expected call of SetValidatorsStatusAndUnstakingHeightIfPausedBefore.
func (mr *MockPersistenceRWContextMockRecorder) SetValidatorsStatusAndUnstakingHeightIfPausedBefore(pausedBeforeHeight, unstakingHeight, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidatorsStatusAndUnstakingHeightIfPausedBefore", reflect.TypeOf((*MockPersistenceRWContext)(nil).SetValidatorsStatusAndUnstakingHeightIfPausedBefore), pausedBeforeHeight, unstakingHeight, status)
}

// SubtractAccountAmount mocks base method.
func (m *MockPersistenceRWContext) SubtractAccountAmount(address []byte, amount string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubtractAccountAmount", address, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubtractAccountAmount indicates an expected call of SubtractAccountAmount.
func (mr *MockPersistenceRWContextMockRecorder) SubtractAccountAmount(address, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubtractAccountAmount", reflect.TypeOf((*MockPersistenceRWContext)(nil).SubtractAccountAmount), address, amount)
}

// SubtractPoolAmount mocks base method.
func (m *MockPersistenceRWContext) SubtractPoolAmount(name, amount string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubtractPoolAmount", name, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubtractPoolAmount indicates an expected call of SubtractPoolAmount.
func (mr *MockPersistenceRWContextMockRecorder) SubtractPoolAmount(name, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubtractPoolAmount", reflect.TypeOf((*MockPersistenceRWContext)(nil).SubtractPoolAmount), name, amount)
}

// UpdateApp mocks base method.
func (m *MockPersistenceRWContext) UpdateApp(address []byte, maxRelaysToAdd, amount string, chainsToUpdate []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApp", address, maxRelaysToAdd, amount, chainsToUpdate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApp indicates an expected call of UpdateApp.
func (mr *MockPersistenceRWContextMockRecorder) UpdateApp(address, maxRelaysToAdd, amount, chainsToUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApp", reflect.TypeOf((*MockPersistenceRWContext)(nil).UpdateApp), address, maxRelaysToAdd, amount, chainsToUpdate)
}

// UpdateFisherman mocks base method.
func (m *MockPersistenceRWContext) UpdateFisherman(address []byte, serviceURL, amount string, chains []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFisherman", address, serviceURL, amount, chains)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFisherman indicates an expected call of UpdateFisherman.
func (mr *MockPersistenceRWContextMockRecorder) UpdateFisherman(address, serviceURL, amount, chains interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFisherman", reflect.TypeOf((*MockPersistenceRWContext)(nil).UpdateFisherman), address, serviceURL, amount, chains)
}

// UpdateServiceNode mocks base method.
func (m *MockPersistenceRWContext) UpdateServiceNode(address []byte, serviceURL, amount string, chains []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceNode", address, serviceURL, amount, chains)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServiceNode indicates an expected call of UpdateServiceNode.
func (mr *MockPersistenceRWContextMockRecorder) UpdateServiceNode(address, serviceURL, amount, chains interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceNode", reflect.TypeOf((*MockPersistenceRWContext)(nil).UpdateServiceNode), address, serviceURL, amount, chains)
}

// UpdateValidator mocks base method.
func (m *MockPersistenceRWContext) UpdateValidator(address []byte, serviceURL, amount string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateValidator", address, serviceURL, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateValidator indicates an expected call of UpdateValidator.
func (mr *MockPersistenceRWContextMockRecorder) UpdateValidator(address, serviceURL, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateValidator", reflect.TypeOf((*MockPersistenceRWContext)(nil).UpdateValidator), address, serviceURL, amount)
}

// MockPersistenceWriteContext is a mock of PersistenceWriteContext interface.
type MockPersistenceWriteContext struct {
	ctrl     *gomock.Controller
	recorder *MockPersistenceWriteContextMockRecorder
}

// MockPersistenceWriteContextMockRecorder is the mock recorder for MockPersistenceWriteContext.
type MockPersistenceWriteContextMockRecorder struct {
	mock *MockPersistenceWriteContext
}

// NewMockPersistenceWriteContext creates a new mock instance.
func NewMockPersistenceWriteContext(ctrl *gomock.Controller) *MockPersistenceWriteContext {
	mock := &MockPersistenceWriteContext{ctrl: ctrl}
	mock.recorder = &MockPersistenceWriteContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersistenceWriteContext) EXPECT() *MockPersistenceWriteContextMockRecorder {
	return m.recorder
}

// AddAccountAmount mocks base method.
func (m *MockPersistenceWriteContext) AddAccountAmount(address []byte, amount string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccountAmount", address, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAccountAmount indicates an expected call of AddAccountAmount.
func (mr *MockPersistenceWriteContextMockRecorder) AddAccountAmount(address, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccountAmount", reflect.TypeOf((*MockPersistenceWriteContext)(nil).AddAccountAmount), address, amount)
}

// AddPoolAmount mocks base method.
func (m *MockPersistenceWriteContext) AddPoolAmount(name, amount string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPoolAmount", name, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPoolAmount indicates an expected call of AddPoolAmount.
func (mr *MockPersistenceWriteContextMockRecorder) AddPoolAmount(name, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPoolAmount", reflect.TypeOf((*MockPersistenceWriteContext)(nil).AddPoolAmount), name, amount)
}

// Commit mocks base method.
func (m *MockPersistenceWriteContext) Commit(quorumCert []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", quorumCert)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockPersistenceWriteContextMockRecorder) Commit(quorumCert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockPersistenceWriteContext)(nil).Commit), quorumCert)
}

// ComputeAppHash mocks base method.
func (m *MockPersistenceWriteContext) ComputeAppHash() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeAppHash")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComputeAppHash indicates an expected call of ComputeAppHash.
func (mr *MockPersistenceWriteContextMockRecorder) ComputeAppHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeAppHash", reflect.TypeOf((*MockPersistenceWriteContext)(nil).ComputeAppHash))
}

// GetBlockTxs mocks base method.
func (m *MockPersistenceWriteContext) GetBlockTxs() [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockTxs")
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// GetBlockTxs indicates an expected call of GetBlockTxs.
func (mr *MockPersistenceWriteContextMockRecorder) GetBlockTxs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockTxs", reflect.TypeOf((*MockPersistenceWriteContext)(nil).GetBlockTxs))
}

// IndexTransaction mocks base method.
func (m *MockPersistenceWriteContext) IndexTransaction(txResult modules.TxResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexTransaction", txResult)
	ret0, _ := ret[0].(error)
	return ret0
}

// IndexTransaction indicates an expected call of IndexTransaction.
func (mr *MockPersistenceWriteContextMockRecorder) IndexTransaction(txResult interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexTransaction", reflect.TypeOf((*MockPersistenceWriteContext)(nil).IndexTransaction), txResult)
}

// InitFlags mocks base method.
func (m *MockPersistenceWriteContext) InitFlags() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitFlags")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitFlags indicates an expected call of InitFlags.
func (mr *MockPersistenceWriteContextMockRecorder) InitFlags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitFlags", reflect.TypeOf((*MockPersistenceWriteContext)(nil).InitFlags))
}

// InitParams mocks base method.
func (m *MockPersistenceWriteContext) InitParams() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitParams")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitParams indicates an expected call of InitParams.
func (mr *MockPersistenceWriteContextMockRecorder) InitParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitParams", reflect.TypeOf((*MockPersistenceWriteContext)(nil).InitParams))
}

// InsertApp mocks base method.
func (m *MockPersistenceWriteContext) InsertApp(address, publicKey, output []byte, paused bool, status int32, maxRelays, stakedTokens string, chains []string, pausedHeight, unstakingHeight int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertApp", address, publicKey, output, paused, status, maxRelays, stakedTokens, chains, pausedHeight, unstakingHeight)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertApp indicates an expected call of InsertApp.
func (mr *MockPersistenceWriteContextMockRecorder) InsertApp(address, publicKey, output, paused, status, maxRelays, stakedTokens, chains, pausedHeight, unstakingHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertApp", reflect.TypeOf((*MockPersistenceWriteContext)(nil).InsertApp), address, publicKey, output, paused, status, maxRelays, stakedTokens, chains, pausedHeight, unstakingHeight)
}

// InsertFisherman mocks base method.
func (m *MockPersistenceWriteContext) InsertFisherman(address, publicKey, output []byte, paused bool, status int32, serviceURL, stakedTokens string, chains []string, pausedHeight, unstakingHeight int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertFisherman", address, publicKey, output, paused, status, serviceURL, stakedTokens, chains, pausedHeight, unstakingHeight)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertFisherman indicates an expected call of InsertFisherman.
func (mr *MockPersistenceWriteContextMockRecorder) InsertFisherman(address, publicKey, output, paused, status, serviceURL, stakedTokens, chains, pausedHeight, unstakingHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertFisherman", reflect.TypeOf((*MockPersistenceWriteContext)(nil).InsertFisherman), address, publicKey, output, paused, status, serviceURL, stakedTokens, chains, pausedHeight, unstakingHeight)
}

// InsertPool mocks base method.
func (m *MockPersistenceWriteContext) InsertPool(name string, address []byte, amount string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPool", name, address, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPool indicates an expected call of InsertPool.
func (mr *MockPersistenceWriteContextMockRecorder) InsertPool(name, address, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPool", reflect.TypeOf((*MockPersistenceWriteContext)(nil).InsertPool), name, address, amount)
}

// InsertServiceNode mocks base method.
func (m *MockPersistenceWriteContext) InsertServiceNode(address, publicKey, output []byte, paused bool, status int32, serviceURL, stakedTokens string, chains []string, pausedHeight, unstakingHeight int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertServiceNode", address, publicKey, output, paused, status, serviceURL, stakedTokens, chains, pausedHeight, unstakingHeight)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertServiceNode indicates an expected call of InsertServiceNode.
func (mr *MockPersistenceWriteContextMockRecorder) InsertServiceNode(address, publicKey, output, paused, status, serviceURL, stakedTokens, chains, pausedHeight, unstakingHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertServiceNode", reflect.TypeOf((*MockPersistenceWriteContext)(nil).InsertServiceNode), address, publicKey, output, paused, status, serviceURL, stakedTokens, chains, pausedHeight, unstakingHeight)
}

// InsertValidator mocks base method.
func (m *MockPersistenceWriteContext) InsertValidator(address, publicKey, output []byte, paused bool, status int32, serviceURL, stakedTokens string, pausedHeight, unstakingHeight int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertValidator", address, publicKey, output, paused, status, serviceURL, stakedTokens, pausedHeight, unstakingHeight)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertValidator indicates an expected call of InsertValidator.
func (mr *MockPersistenceWriteContextMockRecorder) InsertValidator(address, publicKey, output, paused, status, serviceURL, stakedTokens, pausedHeight, unstakingHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertValidator", reflect.TypeOf((*MockPersistenceWriteContext)(nil).InsertValidator), address, publicKey, output, paused, status, serviceURL, stakedTokens, pausedHeight, unstakingHeight)
}

// NewSavePoint mocks base method.
func (m *MockPersistenceWriteContext) NewSavePoint(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSavePoint", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewSavePoint indicates an expected call of NewSavePoint.
func (mr *MockPersistenceWriteContextMockRecorder) NewSavePoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSavePoint", reflect.TypeOf((*MockPersistenceWriteContext)(nil).NewSavePoint), arg0)
}

// Release mocks base method.
func (m *MockPersistenceWriteContext) Release() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release")
	ret0, _ := ret[0].(error)
	return ret0
}

// Release indicates an expected call of Release.
func (mr *MockPersistenceWriteContextMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockPersistenceWriteContext)(nil).Release))
}

// RollbackToSavePoint mocks base method.
func (m *MockPersistenceWriteContext) RollbackToSavePoint(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackToSavePoint", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackToSavePoint indicates an expected call of RollbackToSavePoint.
func (mr *MockPersistenceWriteContextMockRecorder) RollbackToSavePoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackToSavePoint", reflect.TypeOf((*MockPersistenceWriteContext)(nil).RollbackToSavePoint), arg0)
}

// SetAccountAmount mocks base method.
func (m *MockPersistenceWriteContext) SetAccountAmount(address []byte, amount string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccountAmount", address, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAccountAmount indicates an expected call of SetAccountAmount.
func (mr *MockPersistenceWriteContextMockRecorder) SetAccountAmount(address, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccountAmount", reflect.TypeOf((*MockPersistenceWriteContext)(nil).SetAccountAmount), address, amount)
}

// SetAppPauseHeight mocks base method.
func (m *MockPersistenceWriteContext) SetAppPauseHeight(address []byte, height int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAppPauseHeight", address, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAppPauseHeight indicates an expected call of SetAppPauseHeight.
func (mr *MockPersistenceWriteContextMockRecorder) SetAppPauseHeight(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAppPauseHeight", reflect.TypeOf((*MockPersistenceWriteContext)(nil).SetAppPauseHeight), address, height)
}

// SetAppStakeAmount mocks base method.
func (m *MockPersistenceWriteContext) SetAppStakeAmount(address []byte, stakeAmount string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAppStakeAmount", address, stakeAmount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAppStakeAmount indicates an expected call of SetAppStakeAmount.
func (mr *MockPersistenceWriteContextMockRecorder) SetAppStakeAmount(address, stakeAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAppStakeAmount", reflect.TypeOf((*MockPersistenceWriteContext)(nil).SetAppStakeAmount), address, stakeAmount)
}

// SetAppStatusAndUnstakingHeightIfPausedBefore mocks base method.
func (m *MockPersistenceWriteContext) SetAppStatusAndUnstakingHeightIfPausedBefore(pausedBeforeHeight, unstakingHeight int64, status int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAppStatusAndUnstakingHeightIfPausedBefore", pausedBeforeHeight, unstakingHeight, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAppStatusAndUnstakingHeightIfPausedBefore indicates an expected call of SetAppStatusAndUnstakingHeightIfPausedBefore.
func (mr *MockPersistenceWriteContextMockRecorder) SetAppStatusAndUnstakingHeightIfPausedBefore(pausedBeforeHeight, unstakingHeight, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAppStatusAndUnstakingHeightIfPausedBefore", reflect.TypeOf((*MockPersistenceWriteContext)(nil).SetAppStatusAndUnstakingHeightIfPausedBefore), pausedBeforeHeight, unstakingHeight, status)
}

// SetAppUnstakingHeightAndStatus mocks base method.
func (m *MockPersistenceWriteContext) SetAppUnstakingHeightAndStatus(address []byte, unstakingHeight int64, status int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAppUnstakingHeightAndStatus", address, unstakingHeight, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAppUnstakingHeightAndStatus indicates an expected call of SetAppUnstakingHeightAndStatus.
func (mr *MockPersistenceWriteContextMockRecorder) SetAppUnstakingHeightAndStatus(address, unstakingHeight, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAppUnstakingHeightAndStatus", reflect.TypeOf((*MockPersistenceWriteContext)(nil).SetAppUnstakingHeightAndStatus), address, unstakingHeight, status)
}

// SetFishermanPauseHeight mocks base method.
func (m *MockPersistenceWriteContext) SetFishermanPauseHeight(address []byte, height int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFishermanPauseHeight", address, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFishermanPauseHeight indicates an expected call of SetFishermanPauseHeight.
func (mr *MockPersistenceWriteContextMockRecorder) SetFishermanPauseHeight(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFishermanPauseHeight", reflect.TypeOf((*MockPersistenceWriteContext)(nil).SetFishermanPauseHeight), address, height)
}

// SetFishermanStakeAmount mocks base method.
func (m *MockPersistenceWriteContext) SetFishermanStakeAmount(address []byte, stakeAmount string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFishermanStakeAmount", address, stakeAmount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFishermanStakeAmount indicates an expected call of SetFishermanStakeAmount.
func (mr *MockPersistenceWriteContextMockRecorder) SetFishermanStakeAmount(address, stakeAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFishermanStakeAmount", reflect.TypeOf((*MockPersistenceWriteContext)(nil).SetFishermanStakeAmount), address, stakeAmount)
}

// SetFishermanStatusAndUnstakingHeightIfPausedBefore mocks base method.
func (m *MockPersistenceWriteContext) SetFishermanStatusAndUnstakingHeightIfPausedBefore(pausedBeforeHeight, unstakingHeight int64, status int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFishermanStatusAndUnstakingHeightIfPausedBefore", pausedBeforeHeight, unstakingHeight, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFishermanStatusAndUnstakingHeightIfPausedBefore indicates an expected call of SetFishermanStatusAndUnstakingHeightIfPausedBefore.
func (mr *MockPersistenceWriteContextMockRecorder) SetFishermanStatusAndUnstakingHeightIfPausedBefore(pausedBeforeHeight, unstakingHeight, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFishermanStatusAndUnstakingHeightIfPausedBefore", reflect.TypeOf((*MockPersistenceWriteContext)(nil).SetFishermanStatusAndUnstakingHeightIfPausedBefore), pausedBeforeHeight, unstakingHeight, status)
}

// SetFishermanUnstakingHeightAndStatus mocks base method.
func (m *MockPersistenceWriteContext) SetFishermanUnstakingHeightAndStatus(address []byte, unstakingHeight int64, status int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFishermanUnstakingHeightAndStatus", address, unstakingHeight, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFishermanUnstakingHeightAndStatus indicates an expected call of SetFishermanUnstakingHeightAndStatus.
func (mr *MockPersistenceWriteContextMockRecorder) SetFishermanUnstakingHeightAndStatus(address, unstakingHeight, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFishermanUnstakingHeightAndStatus", reflect.TypeOf((*MockPersistenceWriteContext)(nil).SetFishermanUnstakingHeightAndStatus), address, unstakingHeight, status)
}

// SetFlag mocks base method.
func (m *MockPersistenceWriteContext) SetFlag(paramName string, value interface{}, enabled bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFlag", paramName, value, enabled)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFlag indicates an expected call of SetFlag.
func (mr *MockPersistenceWriteContextMockRecorder) SetFlag(paramName, value, enabled interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFlag", reflect.TypeOf((*MockPersistenceWriteContext)(nil).SetFlag), paramName, value, enabled)
}

// SetParam mocks base method.
func (m *MockPersistenceWriteContext) SetParam(paramName string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetParam", paramName, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetParam indicates an expected call of SetParam.
func (mr *MockPersistenceWriteContextMockRecorder) SetParam(paramName, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetParam", reflect.TypeOf((*MockPersistenceWriteContext)(nil).SetParam), paramName, value)
}

// SetPoolAmount mocks base method.
func (m *MockPersistenceWriteContext) SetPoolAmount(name, amount string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPoolAmount", name, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPoolAmount indicates an expected call of SetPoolAmount.
func (mr *MockPersistenceWriteContextMockRecorder) SetPoolAmount(name, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPoolAmount", reflect.TypeOf((*MockPersistenceWriteContext)(nil).SetPoolAmount), name, amount)
}

// SetProposalBlock mocks base method.
func (m *MockPersistenceWriteContext) SetProposalBlock(blockHash string, proposerAddr, quorumCert []byte, transactions [][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProposalBlock", blockHash, proposerAddr, quorumCert, transactions)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProposalBlock indicates an expected call of SetProposalBlock.
func (mr *MockPersistenceWriteContextMockRecorder) SetProposalBlock(blockHash, proposerAddr, quorumCert, transactions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProposalBlock", reflect.TypeOf((*MockPersistenceWriteContext)(nil).SetProposalBlock), blockHash, proposerAddr, quorumCert, transactions)
}

// SetServiceNodePauseHeight mocks base method.
func (m *MockPersistenceWriteContext) SetServiceNodePauseHeight(address []byte, height int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetServiceNodePauseHeight", address, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetServiceNodePauseHeight indicates an expected call of SetServiceNodePauseHeight.
func (mr *MockPersistenceWriteContextMockRecorder) SetServiceNodePauseHeight(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServiceNodePauseHeight", reflect.TypeOf((*MockPersistenceWriteContext)(nil).SetServiceNodePauseHeight), address, height)
}

// SetServiceNodeStakeAmount mocks base method.
func (m *MockPersistenceWriteContext) SetServiceNodeStakeAmount(address []byte, stakeAmount string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetServiceNodeStakeAmount", address, stakeAmount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetServiceNodeStakeAmount indicates an expected call of SetServiceNodeStakeAmount.
func (mr *MockPersistenceWriteContextMockRecorder) SetServiceNodeStakeAmount(address, stakeAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServiceNodeStakeAmount", reflect.TypeOf((*MockPersistenceWriteContext)(nil).SetServiceNodeStakeAmount), address, stakeAmount)
}

// SetServiceNodeStatusAndUnstakingHeightIfPausedBefore mocks base method.
func (m *MockPersistenceWriteContext) SetServiceNodeStatusAndUnstakingHeightIfPausedBefore(pausedBeforeHeight, unstakingHeight int64, status int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetServiceNodeStatusAndUnstakingHeightIfPausedBefore", pausedBeforeHeight, unstakingHeight, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetServiceNodeStatusAndUnstakingHeightIfPausedBefore indicates an expected call of SetServiceNodeStatusAndUnstakingHeightIfPausedBefore.
func (mr *MockPersistenceWriteContextMockRecorder) SetServiceNodeStatusAndUnstakingHeightIfPausedBefore(pausedBeforeHeight, unstakingHeight, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServiceNodeStatusAndUnstakingHeightIfPausedBefore", reflect.TypeOf((*MockPersistenceWriteContext)(nil).SetServiceNodeStatusAndUnstakingHeightIfPausedBefore), pausedBeforeHeight, unstakingHeight, status)
}

// SetServiceNodeUnstakingHeightAndStatus mocks base method.
func (m *MockPersistenceWriteContext) SetServiceNodeUnstakingHeightAndStatus(address []byte, unstakingHeight int64, status int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetServiceNodeUnstakingHeightAndStatus", address, unstakingHeight, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetServiceNodeUnstakingHeightAndStatus indicates an expected call of SetServiceNodeUnstakingHeightAndStatus.
func (mr *MockPersistenceWriteContextMockRecorder) SetServiceNodeUnstakingHeightAndStatus(address, unstakingHeight, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServiceNodeUnstakingHeightAndStatus", reflect.TypeOf((*MockPersistenceWriteContext)(nil).SetServiceNodeUnstakingHeightAndStatus), address, unstakingHeight, status)
}

// SetValidatorMissedBlocks mocks base method.
func (m *MockPersistenceWriteContext) SetValidatorMissedBlocks(address []byte, missedBlocks int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValidatorMissedBlocks", address, missedBlocks)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValidatorMissedBlocks indicates an expected call of SetValidatorMissedBlocks.
func (mr *MockPersistenceWriteContextMockRecorder) SetValidatorMissedBlocks(address, missedBlocks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidatorMissedBlocks", reflect.TypeOf((*MockPersistenceWriteContext)(nil).SetValidatorMissedBlocks), address, missedBlocks)
}

// SetValidatorPauseHeight mocks base method.
func (m *MockPersistenceWriteContext) SetValidatorPauseHeight(address []byte, height int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValidatorPauseHeight", address, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValidatorPauseHeight indicates an expected call of SetValidatorPauseHeight.
func (mr *MockPersistenceWriteContextMockRecorder) SetValidatorPauseHeight(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidatorPauseHeight", reflect.TypeOf((*MockPersistenceWriteContext)(nil).SetValidatorPauseHeight), address, height)
}

// SetValidatorPauseHeightAndMissedBlocks mocks base method.
func (m *MockPersistenceWriteContext) SetValidatorPauseHeightAndMissedBlocks(address []byte, pauseHeight int64, missedBlocks int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValidatorPauseHeightAndMissedBlocks", address, pauseHeight, missedBlocks)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValidatorPauseHeightAndMissedBlocks indicates an expected call of SetValidatorPauseHeightAndMissedBlocks.
func (mr *MockPersistenceWriteContextMockRecorder) SetValidatorPauseHeightAndMissedBlocks(address, pauseHeight, missedBlocks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidatorPauseHeightAndMissedBlocks", reflect.TypeOf((*MockPersistenceWriteContext)(nil).SetValidatorPauseHeightAndMissedBlocks), address, pauseHeight, missedBlocks)
}

// SetValidatorStakeAmount mocks base method.
func (m *MockPersistenceWriteContext) SetValidatorStakeAmount(address []byte, stakeAmount string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValidatorStakeAmount", address, stakeAmount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValidatorStakeAmount indicates an expected call of SetValidatorStakeAmount.
func (mr *MockPersistenceWriteContextMockRecorder) SetValidatorStakeAmount(address, stakeAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidatorStakeAmount", reflect.TypeOf((*MockPersistenceWriteContext)(nil).SetValidatorStakeAmount), address, stakeAmount)
}

// SetValidatorUnstakingHeightAndStatus mocks base method.
func (m *MockPersistenceWriteContext) SetValidatorUnstakingHeightAndStatus(address []byte, unstakingHeight int64, status int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValidatorUnstakingHeightAndStatus", address, unstakingHeight, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValidatorUnstakingHeightAndStatus indicates an expected call of SetValidatorUnstakingHeightAndStatus.
func (mr *MockPersistenceWriteContextMockRecorder) SetValidatorUnstakingHeightAndStatus(address, unstakingHeight, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidatorUnstakingHeightAndStatus", reflect.TypeOf((*MockPersistenceWriteContext)(nil).SetValidatorUnstakingHeightAndStatus), address, unstakingHeight, status)
}

// SetValidatorsStatusAndUnstakingHeightIfPausedBefore mocks base method.
func (m *MockPersistenceWriteContext) SetValidatorsStatusAndUnstakingHeightIfPausedBefore(pausedBeforeHeight, unstakingHeight int64, status int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValidatorsStatusAndUnstakingHeightIfPausedBefore", pausedBeforeHeight, unstakingHeight, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValidatorsStatusAndUnstakingHeightIfPausedBefore indicates an expected call of SetValidatorsStatusAndUnstakingHeightIfPausedBefore.
func (mr *MockPersistenceWriteContextMockRecorder) SetValidatorsStatusAndUnstakingHeightIfPausedBefore(pausedBeforeHeight, unstakingHeight, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidatorsStatusAndUnstakingHeightIfPausedBefore", reflect.TypeOf((*MockPersistenceWriteContext)(nil).SetValidatorsStatusAndUnstakingHeightIfPausedBefore), pausedBeforeHeight, unstakingHeight, status)
}

// SubtractAccountAmount mocks base method.
func (m *MockPersistenceWriteContext) SubtractAccountAmount(address []byte, amount string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubtractAccountAmount", address, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubtractAccountAmount indicates an expected call of SubtractAccountAmount.
func (mr *MockPersistenceWriteContextMockRecorder) SubtractAccountAmount(address, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubtractAccountAmount", reflect.TypeOf((*MockPersistenceWriteContext)(nil).SubtractAccountAmount), address, amount)
}

// SubtractPoolAmount mocks base method.
func (m *MockPersistenceWriteContext) SubtractPoolAmount(name, amount string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubtractPoolAmount", name, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubtractPoolAmount indicates an expected call of SubtractPoolAmount.
func (mr *MockPersistenceWriteContextMockRecorder) SubtractPoolAmount(name, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubtractPoolAmount", reflect.TypeOf((*MockPersistenceWriteContext)(nil).SubtractPoolAmount), name, amount)
}

// UpdateApp mocks base method.
func (m *MockPersistenceWriteContext) UpdateApp(address []byte, maxRelaysToAdd, amount string, chainsToUpdate []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApp", address, maxRelaysToAdd, amount, chainsToUpdate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApp indicates an expected call of UpdateApp.
func (mr *MockPersistenceWriteContextMockRecorder) UpdateApp(address, maxRelaysToAdd, amount, chainsToUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApp", reflect.TypeOf((*MockPersistenceWriteContext)(nil).UpdateApp), address, maxRelaysToAdd, amount, chainsToUpdate)
}

// UpdateFisherman mocks base method.
func (m *MockPersistenceWriteContext) UpdateFisherman(address []byte, serviceURL, amount string, chains []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFisherman", address, serviceURL, amount, chains)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFisherman indicates an expected call of UpdateFisherman.
func (mr *MockPersistenceWriteContextMockRecorder) UpdateFisherman(address, serviceURL, amount, chains interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFisherman", reflect.TypeOf((*MockPersistenceWriteContext)(nil).UpdateFisherman), address, serviceURL, amount, chains)
}

// UpdateServiceNode mocks base method.
func (m *MockPersistenceWriteContext) UpdateServiceNode(address []byte, serviceURL, amount string, chains []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceNode", address, serviceURL, amount, chains)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServiceNode indicates an expected call of UpdateServiceNode.
func (mr *MockPersistenceWriteContextMockRecorder) UpdateServiceNode(address, serviceURL, amount, chains interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceNode", reflect.TypeOf((*MockPersistenceWriteContext)(nil).UpdateServiceNode), address, serviceURL, amount, chains)
}

// UpdateValidator mocks base method.
func (m *MockPersistenceWriteContext) UpdateValidator(address []byte, serviceURL, amount string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateValidator", address, serviceURL, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateValidator indicates an expected call of UpdateValidator.
func (mr *MockPersistenceWriteContextMockRecorder) UpdateValidator(address, serviceURL, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateValidator", reflect.TypeOf((*MockPersistenceWriteContext)(nil).UpdateValidator), address, serviceURL, amount)
}

// MockPersistenceReadContext is a mock of PersistenceReadContext interface.
type MockPersistenceReadContext struct {
	ctrl     *gomock.Controller
	recorder *MockPersistenceReadContextMockRecorder
}

// MockPersistenceReadContextMockRecorder is the mock recorder for MockPersistenceReadContext.
type MockPersistenceReadContextMockRecorder struct {
	mock *MockPersistenceReadContext
}

// NewMockPersistenceReadContext creates a new mock instance.
func NewMockPersistenceReadContext(ctrl *gomock.Controller) *MockPersistenceReadContext {
	mock := &MockPersistenceReadContext{ctrl: ctrl}
	mock.recorder = &MockPersistenceReadContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersistenceReadContext) EXPECT() *MockPersistenceReadContextMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPersistenceReadContext) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPersistenceReadContextMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPersistenceReadContext)(nil).Close))
}

// GetAccountAmount mocks base method.
func (m *MockPersistenceReadContext) GetAccountAmount(address []byte, height int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountAmount", address, height)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountAmount indicates an expected call of GetAccountAmount.
func (mr *MockPersistenceReadContextMockRecorder) GetAccountAmount(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountAmount", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetAccountAmount), address, height)
}

// GetAllAccounts mocks base method.
func (m *MockPersistenceReadContext) GetAllAccounts(height int64) ([]modules.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAccounts", height)
	ret0, _ := ret[0].([]modules.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAccounts indicates an expected call of GetAllAccounts.
func (mr *MockPersistenceReadContextMockRecorder) GetAllAccounts(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAccounts", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetAllAccounts), height)
}

// GetAllApps mocks base method.
func (m *MockPersistenceReadContext) GetAllApps(height int64) ([]modules.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllApps", height)
	ret0, _ := ret[0].([]modules.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllApps indicates an expected call of GetAllApps.
func (mr *MockPersistenceReadContextMockRecorder) GetAllApps(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllApps", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetAllApps), height)
}

// GetAllFishermen mocks base method.
func (m *MockPersistenceReadContext) GetAllFishermen(height int64) ([]modules.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFishermen", height)
	ret0, _ := ret[0].([]modules.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFishermen indicates an expected call of GetAllFishermen.
func (mr *MockPersistenceReadContextMockRecorder) GetAllFishermen(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFishermen", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetAllFishermen), height)
}

// GetAllPools mocks base method.
func (m *MockPersistenceReadContext) GetAllPools(height int64) ([]modules.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPools", height)
	ret0, _ := ret[0].([]modules.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPools indicates an expected call of GetAllPools.
func (mr *MockPersistenceReadContextMockRecorder) GetAllPools(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPools", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetAllPools), height)
}

// GetAllServiceNodes mocks base method.
func (m *MockPersistenceReadContext) GetAllServiceNodes(height int64) ([]modules.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllServiceNodes", height)
	ret0, _ := ret[0].([]modules.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllServiceNodes indicates an expected call of GetAllServiceNodes.
func (mr *MockPersistenceReadContextMockRecorder) GetAllServiceNodes(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllServiceNodes", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetAllServiceNodes), height)
}

// GetAllValidators mocks base method.
func (m *MockPersistenceReadContext) GetAllValidators(height int64) ([]modules.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllValidators", height)
	ret0, _ := ret[0].([]modules.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllValidators indicates an expected call of GetAllValidators.
func (mr *MockPersistenceReadContextMockRecorder) GetAllValidators(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllValidators", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetAllValidators), height)
}

// GetAppExists mocks base method.
func (m *MockPersistenceReadContext) GetAppExists(address []byte, height int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppExists", address, height)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppExists indicates an expected call of GetAppExists.
func (mr *MockPersistenceReadContextMockRecorder) GetAppExists(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppExists", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetAppExists), address, height)
}

// GetAppOutputAddress mocks base method.
func (m *MockPersistenceReadContext) GetAppOutputAddress(operator []byte, height int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppOutputAddress", operator, height)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppOutputAddress indicates an expected call of GetAppOutputAddress.
func (mr *MockPersistenceReadContextMockRecorder) GetAppOutputAddress(operator, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppOutputAddress", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetAppOutputAddress), operator, height)
}

// GetAppPauseHeightIfExists mocks base method.
func (m *MockPersistenceReadContext) GetAppPauseHeightIfExists(address []byte, height int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppPauseHeightIfExists", address, height)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppPauseHeightIfExists indicates an expected call of GetAppPauseHeightIfExists.
func (mr *MockPersistenceReadContextMockRecorder) GetAppPauseHeightIfExists(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppPauseHeightIfExists", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetAppPauseHeightIfExists), address, height)
}

// GetAppStakeAmount mocks base method.
func (m *MockPersistenceReadContext) GetAppStakeAmount(height int64, address []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppStakeAmount", height, address)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppStakeAmount indicates an expected call of GetAppStakeAmount.
func (mr *MockPersistenceReadContextMockRecorder) GetAppStakeAmount(height, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppStakeAmount", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetAppStakeAmount), height, address)
}

// GetAppStatus mocks base method.
func (m *MockPersistenceReadContext) GetAppStatus(address []byte, height int64) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppStatus", address, height)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppStatus indicates an expected call of GetAppStatus.
func (mr *MockPersistenceReadContextMockRecorder) GetAppStatus(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppStatus", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetAppStatus), address, height)
}

// GetAppsReadyToUnstake mocks base method.
func (m *MockPersistenceReadContext) GetAppsReadyToUnstake(height int64, status int32) ([]modules.IUnstakingActor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppsReadyToUnstake", height, status)
	ret0, _ := ret[0].([]modules.IUnstakingActor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppsReadyToUnstake indicates an expected call of GetAppsReadyToUnstake.
func (mr *MockPersistenceReadContextMockRecorder) GetAppsReadyToUnstake(height, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppsReadyToUnstake", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetAppsReadyToUnstake), height, status)
}

// GetBlockHash mocks base method.
func (m *MockPersistenceReadContext) GetBlockHash(height int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHash", height)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHash indicates an expected call of GetBlockHash.
func (mr *MockPersistenceReadContextMockRecorder) GetBlockHash(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHash", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetBlockHash), height)
}

// GetBlocksPerSession mocks base method.
func (m *MockPersistenceReadContext) GetBlocksPerSession(height int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlocksPerSession", height)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlocksPerSession indicates an expected call of GetBlocksPerSession.
func (mr *MockPersistenceReadContextMockRecorder) GetBlocksPerSession(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlocksPerSession", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetBlocksPerSession), height)
}

// GetBytesFlag mocks base method.
func (m *MockPersistenceReadContext) GetBytesFlag(paramName string, height int64) ([]byte, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBytesFlag", paramName, height)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBytesFlag indicates an expected call of GetBytesFlag.
func (mr *MockPersistenceReadContextMockRecorder) GetBytesFlag(paramName, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBytesFlag", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetBytesFlag), paramName, height)
}

// GetBytesParam mocks base method.
func (m *MockPersistenceReadContext) GetBytesParam(paramName string, height int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBytesParam", paramName, height)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBytesParam indicates an expected call of GetBytesParam.
func (mr *MockPersistenceReadContextMockRecorder) GetBytesParam(paramName, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBytesParam", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetBytesParam), paramName, height)
}

// GetFishermanExists mocks base method.
func (m *MockPersistenceReadContext) GetFishermanExists(address []byte, height int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFishermanExists", address, height)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFishermanExists indicates an expected call of GetFishermanExists.
func (mr *MockPersistenceReadContextMockRecorder) GetFishermanExists(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFishermanExists", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetFishermanExists), address, height)
}

// GetFishermanOutputAddress mocks base method.
func (m *MockPersistenceReadContext) GetFishermanOutputAddress(operator []byte, height int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFishermanOutputAddress", operator, height)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFishermanOutputAddress indicates an expected call of GetFishermanOutputAddress.
func (mr *MockPersistenceReadContextMockRecorder) GetFishermanOutputAddress(operator, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFishermanOutputAddress", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetFishermanOutputAddress), operator, height)
}

// GetFishermanPauseHeightIfExists mocks base method.
func (m *MockPersistenceReadContext) GetFishermanPauseHeightIfExists(address []byte, height int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFishermanPauseHeightIfExists", address, height)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFishermanPauseHeightIfExists indicates an expected call of GetFishermanPauseHeightIfExists.
func (mr *MockPersistenceReadContextMockRecorder) GetFishermanPauseHeightIfExists(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFishermanPauseHeightIfExists", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetFishermanPauseHeightIfExists), address, height)
}

// GetFishermanStakeAmount mocks base method.
func (m *MockPersistenceReadContext) GetFishermanStakeAmount(height int64, address []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFishermanStakeAmount", height, address)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFishermanStakeAmount indicates an expected call of GetFishermanStakeAmount.
func (mr *MockPersistenceReadContextMockRecorder) GetFishermanStakeAmount(height, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFishermanStakeAmount", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetFishermanStakeAmount), height, address)
}

// GetFishermanStatus mocks base method.
func (m *MockPersistenceReadContext) GetFishermanStatus(address []byte, height int64) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFishermanStatus", address, height)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFishermanStatus indicates an expected call of GetFishermanStatus.
func (mr *MockPersistenceReadContextMockRecorder) GetFishermanStatus(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFishermanStatus", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetFishermanStatus), address, height)
}

// GetFishermenReadyToUnstake mocks base method.
func (m *MockPersistenceReadContext) GetFishermenReadyToUnstake(height int64, status int32) ([]modules.IUnstakingActor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFishermenReadyToUnstake", height, status)
	ret0, _ := ret[0].([]modules.IUnstakingActor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFishermenReadyToUnstake indicates an expected call of GetFishermenReadyToUnstake.
func (mr *MockPersistenceReadContextMockRecorder) GetFishermenReadyToUnstake(height, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFishermenReadyToUnstake", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetFishermenReadyToUnstake), height, status)
}

// GetHeight mocks base method.
func (m *MockPersistenceReadContext) GetHeight() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeight")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeight indicates an expected call of GetHeight.
func (mr *MockPersistenceReadContextMockRecorder) GetHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeight", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetHeight))
}

// GetIntFlag mocks base method.
func (m *MockPersistenceReadContext) GetIntFlag(paramName string, height int64) (int, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntFlag", paramName, height)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIntFlag indicates an expected call of GetIntFlag.
func (mr *MockPersistenceReadContextMockRecorder) GetIntFlag(paramName, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntFlag", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetIntFlag), paramName, height)
}

// GetIntParam mocks base method.
func (m *MockPersistenceReadContext) GetIntParam(paramName string, height int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntParam", paramName, height)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntParam indicates an expected call of GetIntParam.
func (mr *MockPersistenceReadContextMockRecorder) GetIntParam(paramName, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntParam", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetIntParam), paramName, height)
}

// GetLatestBlockHeight mocks base method.
func (m *MockPersistenceReadContext) GetLatestBlockHeight() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestBlockHeight")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestBlockHeight indicates an expected call of GetLatestBlockHeight.
func (mr *MockPersistenceReadContextMockRecorder) GetLatestBlockHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBlockHeight", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetLatestBlockHeight))
}

// GetPoolAmount mocks base method.
func (m *MockPersistenceReadContext) GetPoolAmount(name string, height int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoolAmount", name, height)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPoolAmount indicates an expected call of GetPoolAmount.
func (mr *MockPersistenceReadContextMockRecorder) GetPoolAmount(name, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoolAmount", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetPoolAmount), name, height)
}

// GetProposerAddr mocks base method.
func (m *MockPersistenceReadContext) GetProposerAddr() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposerAddr")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetProposerAddr indicates an expected call of GetProposerAddr.
func (mr *MockPersistenceReadContextMockRecorder) GetProposerAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposerAddr", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetProposerAddr))
}

// GetServiceNodeCount mocks base method.
func (m *MockPersistenceReadContext) GetServiceNodeCount(chain string, height int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNodeCount", chain, height)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceNodeCount indicates an expected call of GetServiceNodeCount.
func (mr *MockPersistenceReadContextMockRecorder) GetServiceNodeCount(chain, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNodeCount", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetServiceNodeCount), chain, height)
}

// GetServiceNodeExists mocks base method.
func (m *MockPersistenceReadContext) GetServiceNodeExists(address []byte, height int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNodeExists", address, height)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceNodeExists indicates an expected call of GetServiceNodeExists.
func (mr *MockPersistenceReadContextMockRecorder) GetServiceNodeExists(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNodeExists", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetServiceNodeExists), address, height)
}

// GetServiceNodeOutputAddress mocks base method.
func (m *MockPersistenceReadContext) GetServiceNodeOutputAddress(operator []byte, height int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNodeOutputAddress", operator, height)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceNodeOutputAddress indicates an expected call of GetServiceNodeOutputAddress.
func (mr *MockPersistenceReadContextMockRecorder) GetServiceNodeOutputAddress(operator, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNodeOutputAddress", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetServiceNodeOutputAddress), operator, height)
}

// GetServiceNodePauseHeightIfExists mocks base method.
func (m *MockPersistenceReadContext) GetServiceNodePauseHeightIfExists(address []byte, height int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNodePauseHeightIfExists", address, height)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceNodePauseHeightIfExists indicates an expected call of GetServiceNodePauseHeightIfExists.
func (mr *MockPersistenceReadContextMockRecorder) GetServiceNodePauseHeightIfExists(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNodePauseHeightIfExists", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetServiceNodePauseHeightIfExists), address, height)
}

// GetServiceNodeStakeAmount mocks base method.
func (m *MockPersistenceReadContext) GetServiceNodeStakeAmount(height int64, address []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNodeStakeAmount", height, address)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceNodeStakeAmount indicates an expected call of GetServiceNodeStakeAmount.
func (mr *MockPersistenceReadContextMockRecorder) GetServiceNodeStakeAmount(height, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNodeStakeAmount", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetServiceNodeStakeAmount), height, address)
}

// GetServiceNodeStatus mocks base method.
func (m *MockPersistenceReadContext) GetServiceNodeStatus(address []byte, height int64) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNodeStatus", address, height)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceNodeStatus indicates an expected call of GetServiceNodeStatus.
func (mr *MockPersistenceReadContextMockRecorder) GetServiceNodeStatus(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNodeStatus", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetServiceNodeStatus), address, height)
}

// GetServiceNodesPerSessionAt mocks base method.
func (m *MockPersistenceReadContext) GetServiceNodesPerSessionAt(height int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNodesPerSessionAt", height)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceNodesPerSessionAt indicates an expected call of GetServiceNodesPerSessionAt.
func (mr *MockPersistenceReadContextMockRecorder) GetServiceNodesPerSessionAt(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNodesPerSessionAt", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetServiceNodesPerSessionAt), height)
}

// GetServiceNodesReadyToUnstake mocks base method.
func (m *MockPersistenceReadContext) GetServiceNodesReadyToUnstake(height int64, status int32) ([]modules.IUnstakingActor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNodesReadyToUnstake", height, status)
	ret0, _ := ret[0].([]modules.IUnstakingActor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceNodesReadyToUnstake indicates an expected call of GetServiceNodesReadyToUnstake.
func (mr *MockPersistenceReadContextMockRecorder) GetServiceNodesReadyToUnstake(height, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNodesReadyToUnstake", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetServiceNodesReadyToUnstake), height, status)
}

// GetStringFlag mocks base method.
func (m *MockPersistenceReadContext) GetStringFlag(paramName string, height int64) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringFlag", paramName, height)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStringFlag indicates an expected call of GetStringFlag.
func (mr *MockPersistenceReadContextMockRecorder) GetStringFlag(paramName, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringFlag", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetStringFlag), paramName, height)
}

// GetStringParam mocks base method.
func (m *MockPersistenceReadContext) GetStringParam(paramName string, height int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringParam", paramName, height)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStringParam indicates an expected call of GetStringParam.
func (mr *MockPersistenceReadContextMockRecorder) GetStringParam(paramName, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringParam", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetStringParam), paramName, height)
}

// GetValidatorExists mocks base method.
func (m *MockPersistenceReadContext) GetValidatorExists(address []byte, height int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorExists", address, height)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorExists indicates an expected call of GetValidatorExists.
func (mr *MockPersistenceReadContextMockRecorder) GetValidatorExists(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorExists", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetValidatorExists), address, height)
}

// GetValidatorMissedBlocks mocks base method.
func (m *MockPersistenceReadContext) GetValidatorMissedBlocks(address []byte, height int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorMissedBlocks", address, height)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorMissedBlocks indicates an expected call of GetValidatorMissedBlocks.
func (mr *MockPersistenceReadContextMockRecorder) GetValidatorMissedBlocks(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorMissedBlocks", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetValidatorMissedBlocks), address, height)
}

// GetValidatorOutputAddress mocks base method.
func (m *MockPersistenceReadContext) GetValidatorOutputAddress(operator []byte, height int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorOutputAddress", operator, height)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorOutputAddress indicates an expected call of GetValidatorOutputAddress.
func (mr *MockPersistenceReadContextMockRecorder) GetValidatorOutputAddress(operator, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorOutputAddress", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetValidatorOutputAddress), operator, height)
}

// GetValidatorPauseHeightIfExists mocks base method.
func (m *MockPersistenceReadContext) GetValidatorPauseHeightIfExists(address []byte, height int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorPauseHeightIfExists", address, height)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorPauseHeightIfExists indicates an expected call of GetValidatorPauseHeightIfExists.
func (mr *MockPersistenceReadContextMockRecorder) GetValidatorPauseHeightIfExists(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorPauseHeightIfExists", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetValidatorPauseHeightIfExists), address, height)
}

// GetValidatorStakeAmount mocks base method.
func (m *MockPersistenceReadContext) GetValidatorStakeAmount(height int64, address []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorStakeAmount", height, address)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorStakeAmount indicates an expected call of GetValidatorStakeAmount.
func (mr *MockPersistenceReadContextMockRecorder) GetValidatorStakeAmount(height, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorStakeAmount", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetValidatorStakeAmount), height, address)
}

// GetValidatorStatus mocks base method.
func (m *MockPersistenceReadContext) GetValidatorStatus(address []byte, height int64) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorStatus", address, height)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorStatus indicates an expected call of GetValidatorStatus.
func (mr *MockPersistenceReadContextMockRecorder) GetValidatorStatus(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorStatus", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetValidatorStatus), address, height)
}

// GetValidatorsReadyToUnstake mocks base method.
func (m *MockPersistenceReadContext) GetValidatorsReadyToUnstake(height int64, status int32) ([]modules.IUnstakingActor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorsReadyToUnstake", height, status)
	ret0, _ := ret[0].([]modules.IUnstakingActor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorsReadyToUnstake indicates an expected call of GetValidatorsReadyToUnstake.
func (mr *MockPersistenceReadContextMockRecorder) GetValidatorsReadyToUnstake(height, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorsReadyToUnstake", reflect.TypeOf((*MockPersistenceReadContext)(nil).GetValidatorsReadyToUnstake), height, status)
}
