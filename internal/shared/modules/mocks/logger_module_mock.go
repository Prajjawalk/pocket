// Code generated by MockGen. DO NOT EDIT.
// Source: logger_module.go

// Package mock_modules is a generated GoMock package.
package mock_modules

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	modules "github.com/pokt-network/pocket/internal/shared/modules"
)

// MockLoggerModule is a mock of LoggerModule interface.
type MockLoggerModule struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerModuleMockRecorder
}

// MockLoggerModuleMockRecorder is the mock recorder for MockLoggerModule.
type MockLoggerModuleMockRecorder struct {
	mock *MockLoggerModule
}

// NewMockLoggerModule creates a new mock instance.
func NewMockLoggerModule(ctrl *gomock.Controller) *MockLoggerModule {
	mock := &MockLoggerModule{ctrl: ctrl}
	mock.recorder = &MockLoggerModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggerModule) EXPECT() *MockLoggerModuleMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLoggerModule) Create(runtime modules.RuntimeMgr) (modules.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", runtime)
	ret0, _ := ret[0].(modules.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockLoggerModuleMockRecorder) Create(runtime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLoggerModule)(nil).Create), runtime)
}

// CreateLoggerForModule mocks base method.
func (m *MockLoggerModule) CreateLoggerForModule(arg0 string) modules.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoggerForModule", arg0)
	ret0, _ := ret[0].(modules.Logger)
	return ret0
}

// CreateLoggerForModule indicates an expected call of CreateLoggerForModule.
func (mr *MockLoggerModuleMockRecorder) CreateLoggerForModule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoggerForModule", reflect.TypeOf((*MockLoggerModule)(nil).CreateLoggerForModule), arg0)
}

// GetBus mocks base method.
func (m *MockLoggerModule) GetBus() modules.Bus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBus")
	ret0, _ := ret[0].(modules.Bus)
	return ret0
}

// GetBus indicates an expected call of GetBus.
func (mr *MockLoggerModuleMockRecorder) GetBus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBus", reflect.TypeOf((*MockLoggerModule)(nil).GetBus))
}

// GetLogger mocks base method.
func (m *MockLoggerModule) GetLogger() modules.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogger")
	ret0, _ := ret[0].(modules.Logger)
	return ret0
}

// GetLogger indicates an expected call of GetLogger.
func (mr *MockLoggerModuleMockRecorder) GetLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogger", reflect.TypeOf((*MockLoggerModule)(nil).GetLogger))
}

// GetModuleName mocks base method.
func (m *MockLoggerModule) GetModuleName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetModuleName indicates an expected call of GetModuleName.
func (mr *MockLoggerModuleMockRecorder) GetModuleName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleName", reflect.TypeOf((*MockLoggerModule)(nil).GetModuleName))
}

// InitLogger mocks base method.
func (m *MockLoggerModule) InitLogger() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitLogger")
}

// InitLogger indicates an expected call of InitLogger.
func (mr *MockLoggerModuleMockRecorder) InitLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitLogger", reflect.TypeOf((*MockLoggerModule)(nil).InitLogger))
}

// SetBus mocks base method.
func (m *MockLoggerModule) SetBus(arg0 modules.Bus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBus", arg0)
}

// SetBus indicates an expected call of SetBus.
func (mr *MockLoggerModuleMockRecorder) SetBus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBus", reflect.TypeOf((*MockLoggerModule)(nil).SetBus), arg0)
}

// Start mocks base method.
func (m *MockLoggerModule) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockLoggerModuleMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockLoggerModule)(nil).Start))
}

// Stop mocks base method.
func (m *MockLoggerModule) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockLoggerModuleMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockLoggerModule)(nil).Stop))
}
