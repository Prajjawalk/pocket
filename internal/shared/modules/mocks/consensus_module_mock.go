// Code generated by MockGen. DO NOT EDIT.
// Source: consensus_module.go

// Package mock_modules is a generated GoMock package.
package mock_modules

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	crypto "github.com/pokt-network/pocket/internal/shared/crypto"
	messaging "github.com/pokt-network/pocket/internal/shared/messaging"
	modules "github.com/pokt-network/pocket/internal/shared/modules"
	anypb "google.golang.org/protobuf/types/known/anypb"
)

// MockConsensusModule is a mock of ConsensusModule interface.
type MockConsensusModule struct {
	ctrl     *gomock.Controller
	recorder *MockConsensusModuleMockRecorder
}

// MockConsensusModuleMockRecorder is the mock recorder for MockConsensusModule.
type MockConsensusModuleMockRecorder struct {
	mock *MockConsensusModule
}

// NewMockConsensusModule creates a new mock instance.
func NewMockConsensusModule(ctrl *gomock.Controller) *MockConsensusModule {
	mock := &MockConsensusModule{ctrl: ctrl}
	mock.recorder = &MockConsensusModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsensusModule) EXPECT() *MockConsensusModuleMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockConsensusModule) Create(runtime modules.RuntimeMgr) (modules.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", runtime)
	ret0, _ := ret[0].(modules.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockConsensusModuleMockRecorder) Create(runtime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockConsensusModule)(nil).Create), runtime)
}

// CurrentHeight mocks base method.
func (m *MockConsensusModule) CurrentHeight() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentHeight")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// CurrentHeight indicates an expected call of CurrentHeight.
func (mr *MockConsensusModuleMockRecorder) CurrentHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentHeight", reflect.TypeOf((*MockConsensusModule)(nil).CurrentHeight))
}

// CurrentRound mocks base method.
func (m *MockConsensusModule) CurrentRound() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentRound")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// CurrentRound indicates an expected call of CurrentRound.
func (mr *MockConsensusModuleMockRecorder) CurrentRound() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentRound", reflect.TypeOf((*MockConsensusModule)(nil).CurrentRound))
}

// CurrentStep mocks base method.
func (m *MockConsensusModule) CurrentStep() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentStep")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// CurrentStep indicates an expected call of CurrentStep.
func (mr *MockConsensusModuleMockRecorder) CurrentStep() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentStep", reflect.TypeOf((*MockConsensusModule)(nil).CurrentStep))
}

// GetBus mocks base method.
func (m *MockConsensusModule) GetBus() modules.Bus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBus")
	ret0, _ := ret[0].(modules.Bus)
	return ret0
}

// GetBus indicates an expected call of GetBus.
func (mr *MockConsensusModuleMockRecorder) GetBus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBus", reflect.TypeOf((*MockConsensusModule)(nil).GetBus))
}

// GetModuleName mocks base method.
func (m *MockConsensusModule) GetModuleName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetModuleName indicates an expected call of GetModuleName.
func (mr *MockConsensusModuleMockRecorder) GetModuleName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleName", reflect.TypeOf((*MockConsensusModule)(nil).GetModuleName))
}

// GetPrivateKey mocks base method.
func (m *MockConsensusModule) GetPrivateKey() (crypto.PrivateKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateKey")
	ret0, _ := ret[0].(crypto.PrivateKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateKey indicates an expected call of GetPrivateKey.
func (mr *MockConsensusModuleMockRecorder) GetPrivateKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateKey", reflect.TypeOf((*MockConsensusModule)(nil).GetPrivateKey))
}

// HandleDebugMessage mocks base method.
func (m *MockConsensusModule) HandleDebugMessage(arg0 *messaging.DebugMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleDebugMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleDebugMessage indicates an expected call of HandleDebugMessage.
func (mr *MockConsensusModuleMockRecorder) HandleDebugMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDebugMessage", reflect.TypeOf((*MockConsensusModule)(nil).HandleDebugMessage), arg0)
}

// HandleMessage mocks base method.
func (m *MockConsensusModule) HandleMessage(arg0 *anypb.Any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleMessage indicates an expected call of HandleMessage.
func (mr *MockConsensusModuleMockRecorder) HandleMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleMessage", reflect.TypeOf((*MockConsensusModule)(nil).HandleMessage), arg0)
}

// SetBus mocks base method.
func (m *MockConsensusModule) SetBus(arg0 modules.Bus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBus", arg0)
}

// SetBus indicates an expected call of SetBus.
func (mr *MockConsensusModuleMockRecorder) SetBus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBus", reflect.TypeOf((*MockConsensusModule)(nil).SetBus), arg0)
}

// Start mocks base method.
func (m *MockConsensusModule) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockConsensusModuleMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockConsensusModule)(nil).Start))
}

// Stop mocks base method.
func (m *MockConsensusModule) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockConsensusModuleMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockConsensusModule)(nil).Stop))
}

// ValidateConfig mocks base method.
func (m *MockConsensusModule) ValidateConfig(arg0 modules.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateConfig indicates an expected call of ValidateConfig.
func (mr *MockConsensusModuleMockRecorder) ValidateConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfig", reflect.TypeOf((*MockConsensusModule)(nil).ValidateConfig), arg0)
}

// ValidateGenesis mocks base method.
func (m *MockConsensusModule) ValidateGenesis(arg0 modules.GenesisState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateGenesis", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateGenesis indicates an expected call of ValidateGenesis.
func (mr *MockConsensusModuleMockRecorder) ValidateGenesis(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateGenesis", reflect.TypeOf((*MockConsensusModule)(nil).ValidateGenesis), arg0)
}

// ValidatorMap mocks base method.
func (m *MockConsensusModule) ValidatorMap() modules.ValidatorMap {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatorMap")
	ret0, _ := ret[0].(modules.ValidatorMap)
	return ret0
}

// ValidatorMap indicates an expected call of ValidatorMap.
func (mr *MockConsensusModuleMockRecorder) ValidatorMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatorMap", reflect.TypeOf((*MockConsensusModule)(nil).ValidatorMap))
}
