// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package mock_modules is a generated GoMock package.
package mock_modules

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	modules "github.com/pokt-network/pocket/internal/shared/modules"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// MockGenesisState is a mock of GenesisState interface.
type MockGenesisState struct {
	ctrl     *gomock.Controller
	recorder *MockGenesisStateMockRecorder
}

// MockGenesisStateMockRecorder is the mock recorder for MockGenesisState.
type MockGenesisStateMockRecorder struct {
	mock *MockGenesisState
}

// NewMockGenesisState creates a new mock instance.
func NewMockGenesisState(ctrl *gomock.Controller) *MockGenesisState {
	mock := &MockGenesisState{ctrl: ctrl}
	mock.recorder = &MockGenesisStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenesisState) EXPECT() *MockGenesisStateMockRecorder {
	return m.recorder
}

// GetConsensusGenesisState mocks base method.
func (m *MockGenesisState) GetConsensusGenesisState() modules.ConsensusGenesisState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsensusGenesisState")
	ret0, _ := ret[0].(modules.ConsensusGenesisState)
	return ret0
}

// GetConsensusGenesisState indicates an expected call of GetConsensusGenesisState.
func (mr *MockGenesisStateMockRecorder) GetConsensusGenesisState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsensusGenesisState", reflect.TypeOf((*MockGenesisState)(nil).GetConsensusGenesisState))
}

// GetPersistenceGenesisState mocks base method.
func (m *MockGenesisState) GetPersistenceGenesisState() modules.PersistenceGenesisState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersistenceGenesisState")
	ret0, _ := ret[0].(modules.PersistenceGenesisState)
	return ret0
}

// GetPersistenceGenesisState indicates an expected call of GetPersistenceGenesisState.
func (mr *MockGenesisStateMockRecorder) GetPersistenceGenesisState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersistenceGenesisState", reflect.TypeOf((*MockGenesisState)(nil).GetPersistenceGenesisState))
}

// MockConfig is a mock of Config interface.
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
}

// MockConfigMockRecorder is the mock recorder for MockConfig.
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance.
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// GetBaseConfig mocks base method.
func (m *MockConfig) GetBaseConfig() modules.BaseConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseConfig")
	ret0, _ := ret[0].(modules.BaseConfig)
	return ret0
}

// GetBaseConfig indicates an expected call of GetBaseConfig.
func (mr *MockConfigMockRecorder) GetBaseConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseConfig", reflect.TypeOf((*MockConfig)(nil).GetBaseConfig))
}

// GetConsensusConfig mocks base method.
func (m *MockConfig) GetConsensusConfig() modules.ConsensusConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsensusConfig")
	ret0, _ := ret[0].(modules.ConsensusConfig)
	return ret0
}

// GetConsensusConfig indicates an expected call of GetConsensusConfig.
func (mr *MockConfigMockRecorder) GetConsensusConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsensusConfig", reflect.TypeOf((*MockConfig)(nil).GetConsensusConfig))
}

// GetLoggerConfig mocks base method.
func (m *MockConfig) GetLoggerConfig() modules.LoggerConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoggerConfig")
	ret0, _ := ret[0].(modules.LoggerConfig)
	return ret0
}

// GetLoggerConfig indicates an expected call of GetLoggerConfig.
func (mr *MockConfigMockRecorder) GetLoggerConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggerConfig", reflect.TypeOf((*MockConfig)(nil).GetLoggerConfig))
}

// GetP2PConfig mocks base method.
func (m *MockConfig) GetP2PConfig() modules.P2PConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetP2PConfig")
	ret0, _ := ret[0].(modules.P2PConfig)
	return ret0
}

// GetP2PConfig indicates an expected call of GetP2PConfig.
func (mr *MockConfigMockRecorder) GetP2PConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetP2PConfig", reflect.TypeOf((*MockConfig)(nil).GetP2PConfig))
}

// GetPersistenceConfig mocks base method.
func (m *MockConfig) GetPersistenceConfig() modules.PersistenceConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersistenceConfig")
	ret0, _ := ret[0].(modules.PersistenceConfig)
	return ret0
}

// GetPersistenceConfig indicates an expected call of GetPersistenceConfig.
func (mr *MockConfigMockRecorder) GetPersistenceConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersistenceConfig", reflect.TypeOf((*MockConfig)(nil).GetPersistenceConfig))
}

// GetRPCConfig mocks base method.
func (m *MockConfig) GetRPCConfig() modules.RPCConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRPCConfig")
	ret0, _ := ret[0].(modules.RPCConfig)
	return ret0
}

// GetRPCConfig indicates an expected call of GetRPCConfig.
func (mr *MockConfigMockRecorder) GetRPCConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRPCConfig", reflect.TypeOf((*MockConfig)(nil).GetRPCConfig))
}

// GetTelemetryConfig mocks base method.
func (m *MockConfig) GetTelemetryConfig() modules.TelemetryConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTelemetryConfig")
	ret0, _ := ret[0].(modules.TelemetryConfig)
	return ret0
}

// GetTelemetryConfig indicates an expected call of GetTelemetryConfig.
func (mr *MockConfigMockRecorder) GetTelemetryConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTelemetryConfig", reflect.TypeOf((*MockConfig)(nil).GetTelemetryConfig))
}

// GetUtilityConfig mocks base method.
func (m *MockConfig) GetUtilityConfig() modules.UtilityConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUtilityConfig")
	ret0, _ := ret[0].(modules.UtilityConfig)
	return ret0
}

// GetUtilityConfig indicates an expected call of GetUtilityConfig.
func (mr *MockConfigMockRecorder) GetUtilityConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUtilityConfig", reflect.TypeOf((*MockConfig)(nil).GetUtilityConfig))
}

// MockBaseConfig is a mock of BaseConfig interface.
type MockBaseConfig struct {
	ctrl     *gomock.Controller
	recorder *MockBaseConfigMockRecorder
}

// MockBaseConfigMockRecorder is the mock recorder for MockBaseConfig.
type MockBaseConfigMockRecorder struct {
	mock *MockBaseConfig
}

// NewMockBaseConfig creates a new mock instance.
func NewMockBaseConfig(ctrl *gomock.Controller) *MockBaseConfig {
	mock := &MockBaseConfig{ctrl: ctrl}
	mock.recorder = &MockBaseConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseConfig) EXPECT() *MockBaseConfigMockRecorder {
	return m.recorder
}

// GetPrivateKey mocks base method.
func (m *MockBaseConfig) GetPrivateKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPrivateKey indicates an expected call of GetPrivateKey.
func (mr *MockBaseConfigMockRecorder) GetPrivateKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateKey", reflect.TypeOf((*MockBaseConfig)(nil).GetPrivateKey))
}

// GetRootDirectory mocks base method.
func (m *MockBaseConfig) GetRootDirectory() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootDirectory")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRootDirectory indicates an expected call of GetRootDirectory.
func (mr *MockBaseConfigMockRecorder) GetRootDirectory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootDirectory", reflect.TypeOf((*MockBaseConfig)(nil).GetRootDirectory))
}

// MockConsensusConfig is a mock of ConsensusConfig interface.
type MockConsensusConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConsensusConfigMockRecorder
}

// MockConsensusConfigMockRecorder is the mock recorder for MockConsensusConfig.
type MockConsensusConfigMockRecorder struct {
	mock *MockConsensusConfig
}

// NewMockConsensusConfig creates a new mock instance.
func NewMockConsensusConfig(ctrl *gomock.Controller) *MockConsensusConfig {
	mock := &MockConsensusConfig{ctrl: ctrl}
	mock.recorder = &MockConsensusConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsensusConfig) EXPECT() *MockConsensusConfigMockRecorder {
	return m.recorder
}

// GetMaxMempoolBytes mocks base method.
func (m *MockConsensusConfig) GetMaxMempoolBytes() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxMempoolBytes")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetMaxMempoolBytes indicates an expected call of GetMaxMempoolBytes.
func (mr *MockConsensusConfigMockRecorder) GetMaxMempoolBytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxMempoolBytes", reflect.TypeOf((*MockConsensusConfig)(nil).GetMaxMempoolBytes))
}

// GetPrivateKey mocks base method.
func (m *MockConsensusConfig) GetPrivateKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPrivateKey indicates an expected call of GetPrivateKey.
func (mr *MockConsensusConfigMockRecorder) GetPrivateKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateKey", reflect.TypeOf((*MockConsensusConfig)(nil).GetPrivateKey))
}

// MockPacemakerConfig is a mock of PacemakerConfig interface.
type MockPacemakerConfig struct {
	ctrl     *gomock.Controller
	recorder *MockPacemakerConfigMockRecorder
}

// MockPacemakerConfigMockRecorder is the mock recorder for MockPacemakerConfig.
type MockPacemakerConfigMockRecorder struct {
	mock *MockPacemakerConfig
}

// NewMockPacemakerConfig creates a new mock instance.
func NewMockPacemakerConfig(ctrl *gomock.Controller) *MockPacemakerConfig {
	mock := &MockPacemakerConfig{ctrl: ctrl}
	mock.recorder = &MockPacemakerConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPacemakerConfig) EXPECT() *MockPacemakerConfigMockRecorder {
	return m.recorder
}

// GetDebugTimeBetweenStepsMsec mocks base method.
func (m *MockPacemakerConfig) GetDebugTimeBetweenStepsMsec() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDebugTimeBetweenStepsMsec")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetDebugTimeBetweenStepsMsec indicates an expected call of GetDebugTimeBetweenStepsMsec.
func (mr *MockPacemakerConfigMockRecorder) GetDebugTimeBetweenStepsMsec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDebugTimeBetweenStepsMsec", reflect.TypeOf((*MockPacemakerConfig)(nil).GetDebugTimeBetweenStepsMsec))
}

// GetManual mocks base method.
func (m *MockPacemakerConfig) GetManual() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManual")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetManual indicates an expected call of GetManual.
func (mr *MockPacemakerConfigMockRecorder) GetManual() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManual", reflect.TypeOf((*MockPacemakerConfig)(nil).GetManual))
}

// GetTimeoutMsec mocks base method.
func (m *MockPacemakerConfig) GetTimeoutMsec() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeoutMsec")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetTimeoutMsec indicates an expected call of GetTimeoutMsec.
func (mr *MockPacemakerConfigMockRecorder) GetTimeoutMsec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeoutMsec", reflect.TypeOf((*MockPacemakerConfig)(nil).GetTimeoutMsec))
}

// SetTimeoutMsec mocks base method.
func (m *MockPacemakerConfig) SetTimeoutMsec(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTimeoutMsec", arg0)
}

// SetTimeoutMsec indicates an expected call of SetTimeoutMsec.
func (mr *MockPacemakerConfigMockRecorder) SetTimeoutMsec(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeoutMsec", reflect.TypeOf((*MockPacemakerConfig)(nil).SetTimeoutMsec), arg0)
}

// MockPersistenceConfig is a mock of PersistenceConfig interface.
type MockPersistenceConfig struct {
	ctrl     *gomock.Controller
	recorder *MockPersistenceConfigMockRecorder
}

// MockPersistenceConfigMockRecorder is the mock recorder for MockPersistenceConfig.
type MockPersistenceConfigMockRecorder struct {
	mock *MockPersistenceConfig
}

// NewMockPersistenceConfig creates a new mock instance.
func NewMockPersistenceConfig(ctrl *gomock.Controller) *MockPersistenceConfig {
	mock := &MockPersistenceConfig{ctrl: ctrl}
	mock.recorder = &MockPersistenceConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersistenceConfig) EXPECT() *MockPersistenceConfigMockRecorder {
	return m.recorder
}

// GetBlockStorePath mocks base method.
func (m *MockPersistenceConfig) GetBlockStorePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockStorePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBlockStorePath indicates an expected call of GetBlockStorePath.
func (mr *MockPersistenceConfigMockRecorder) GetBlockStorePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockStorePath", reflect.TypeOf((*MockPersistenceConfig)(nil).GetBlockStorePath))
}

// GetNodeSchema mocks base method.
func (m *MockPersistenceConfig) GetNodeSchema() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeSchema")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNodeSchema indicates an expected call of GetNodeSchema.
func (mr *MockPersistenceConfigMockRecorder) GetNodeSchema() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeSchema", reflect.TypeOf((*MockPersistenceConfig)(nil).GetNodeSchema))
}

// GetPostgresUrl mocks base method.
func (m *MockPersistenceConfig) GetPostgresUrl() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostgresUrl")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPostgresUrl indicates an expected call of GetPostgresUrl.
func (mr *MockPersistenceConfigMockRecorder) GetPostgresUrl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostgresUrl", reflect.TypeOf((*MockPersistenceConfig)(nil).GetPostgresUrl))
}

// GetTreesStoreDir mocks base method.
func (m *MockPersistenceConfig) GetTreesStoreDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTreesStoreDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTreesStoreDir indicates an expected call of GetTreesStoreDir.
func (mr *MockPersistenceConfigMockRecorder) GetTreesStoreDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTreesStoreDir", reflect.TypeOf((*MockPersistenceConfig)(nil).GetTreesStoreDir))
}

// GetTxIndexerPath mocks base method.
func (m *MockPersistenceConfig) GetTxIndexerPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxIndexerPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTxIndexerPath indicates an expected call of GetTxIndexerPath.
func (mr *MockPersistenceConfigMockRecorder) GetTxIndexerPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxIndexerPath", reflect.TypeOf((*MockPersistenceConfig)(nil).GetTxIndexerPath))
}

// MockP2PConfig is a mock of P2PConfig interface.
type MockP2PConfig struct {
	ctrl     *gomock.Controller
	recorder *MockP2PConfigMockRecorder
}

// MockP2PConfigMockRecorder is the mock recorder for MockP2PConfig.
type MockP2PConfigMockRecorder struct {
	mock *MockP2PConfig
}

// NewMockP2PConfig creates a new mock instance.
func NewMockP2PConfig(ctrl *gomock.Controller) *MockP2PConfig {
	mock := &MockP2PConfig{ctrl: ctrl}
	mock.recorder = &MockP2PConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockP2PConfig) EXPECT() *MockP2PConfigMockRecorder {
	return m.recorder
}

// GetConsensusPort mocks base method.
func (m *MockP2PConfig) GetConsensusPort() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsensusPort")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetConsensusPort indicates an expected call of GetConsensusPort.
func (mr *MockP2PConfigMockRecorder) GetConsensusPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsensusPort", reflect.TypeOf((*MockP2PConfig)(nil).GetConsensusPort))
}

// GetIsEmptyConnectionType mocks base method.
func (m *MockP2PConfig) GetIsEmptyConnectionType() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIsEmptyConnectionType")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetIsEmptyConnectionType indicates an expected call of GetIsEmptyConnectionType.
func (mr *MockP2PConfigMockRecorder) GetIsEmptyConnectionType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIsEmptyConnectionType", reflect.TypeOf((*MockP2PConfig)(nil).GetIsEmptyConnectionType))
}

// GetPrivateKey mocks base method.
func (m *MockP2PConfig) GetPrivateKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPrivateKey indicates an expected call of GetPrivateKey.
func (mr *MockP2PConfigMockRecorder) GetPrivateKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateKey", reflect.TypeOf((*MockP2PConfig)(nil).GetPrivateKey))
}

// GetUseRainTree mocks base method.
func (m *MockP2PConfig) GetUseRainTree() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUseRainTree")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetUseRainTree indicates an expected call of GetUseRainTree.
func (mr *MockP2PConfigMockRecorder) GetUseRainTree() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUseRainTree", reflect.TypeOf((*MockP2PConfig)(nil).GetUseRainTree))
}

// MockTelemetryConfig is a mock of TelemetryConfig interface.
type MockTelemetryConfig struct {
	ctrl     *gomock.Controller
	recorder *MockTelemetryConfigMockRecorder
}

// MockTelemetryConfigMockRecorder is the mock recorder for MockTelemetryConfig.
type MockTelemetryConfigMockRecorder struct {
	mock *MockTelemetryConfig
}

// NewMockTelemetryConfig creates a new mock instance.
func NewMockTelemetryConfig(ctrl *gomock.Controller) *MockTelemetryConfig {
	mock := &MockTelemetryConfig{ctrl: ctrl}
	mock.recorder = &MockTelemetryConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelemetryConfig) EXPECT() *MockTelemetryConfigMockRecorder {
	return m.recorder
}

// GetAddress mocks base method.
func (m *MockTelemetryConfig) GetAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockTelemetryConfigMockRecorder) GetAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockTelemetryConfig)(nil).GetAddress))
}

// GetEnabled mocks base method.
func (m *MockTelemetryConfig) GetEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetEnabled indicates an expected call of GetEnabled.
func (mr *MockTelemetryConfigMockRecorder) GetEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabled", reflect.TypeOf((*MockTelemetryConfig)(nil).GetEnabled))
}

// GetEndpoint mocks base method.
func (m *MockTelemetryConfig) GetEndpoint() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndpoint")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetEndpoint indicates an expected call of GetEndpoint.
func (mr *MockTelemetryConfigMockRecorder) GetEndpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpoint", reflect.TypeOf((*MockTelemetryConfig)(nil).GetEndpoint))
}

// MockLoggerConfig is a mock of LoggerConfig interface.
type MockLoggerConfig struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerConfigMockRecorder
}

// MockLoggerConfigMockRecorder is the mock recorder for MockLoggerConfig.
type MockLoggerConfigMockRecorder struct {
	mock *MockLoggerConfig
}

// NewMockLoggerConfig creates a new mock instance.
func NewMockLoggerConfig(ctrl *gomock.Controller) *MockLoggerConfig {
	mock := &MockLoggerConfig{ctrl: ctrl}
	mock.recorder = &MockLoggerConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggerConfig) EXPECT() *MockLoggerConfigMockRecorder {
	return m.recorder
}

// GetFormat mocks base method.
func (m *MockLoggerConfig) GetFormat() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFormat")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFormat indicates an expected call of GetFormat.
func (mr *MockLoggerConfigMockRecorder) GetFormat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFormat", reflect.TypeOf((*MockLoggerConfig)(nil).GetFormat))
}

// GetLevel mocks base method.
func (m *MockLoggerConfig) GetLevel() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLevel indicates an expected call of GetLevel.
func (mr *MockLoggerConfigMockRecorder) GetLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel", reflect.TypeOf((*MockLoggerConfig)(nil).GetLevel))
}

// MockUtilityConfig is a mock of UtilityConfig interface.
type MockUtilityConfig struct {
	ctrl     *gomock.Controller
	recorder *MockUtilityConfigMockRecorder
}

// MockUtilityConfigMockRecorder is the mock recorder for MockUtilityConfig.
type MockUtilityConfigMockRecorder struct {
	mock *MockUtilityConfig
}

// NewMockUtilityConfig creates a new mock instance.
func NewMockUtilityConfig(ctrl *gomock.Controller) *MockUtilityConfig {
	mock := &MockUtilityConfig{ctrl: ctrl}
	mock.recorder = &MockUtilityConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUtilityConfig) EXPECT() *MockUtilityConfigMockRecorder {
	return m.recorder
}

// GetMaxMempoolTransactionBytes mocks base method.
func (m *MockUtilityConfig) GetMaxMempoolTransactionBytes() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxMempoolTransactionBytes")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetMaxMempoolTransactionBytes indicates an expected call of GetMaxMempoolTransactionBytes.
func (mr *MockUtilityConfigMockRecorder) GetMaxMempoolTransactionBytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxMempoolTransactionBytes", reflect.TypeOf((*MockUtilityConfig)(nil).GetMaxMempoolTransactionBytes))
}

// GetMaxMempoolTransactions mocks base method.
func (m *MockUtilityConfig) GetMaxMempoolTransactions() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxMempoolTransactions")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetMaxMempoolTransactions indicates an expected call of GetMaxMempoolTransactions.
func (mr *MockUtilityConfigMockRecorder) GetMaxMempoolTransactions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxMempoolTransactions", reflect.TypeOf((*MockUtilityConfig)(nil).GetMaxMempoolTransactions))
}

// MockRPCConfig is a mock of RPCConfig interface.
type MockRPCConfig struct {
	ctrl     *gomock.Controller
	recorder *MockRPCConfigMockRecorder
}

// MockRPCConfigMockRecorder is the mock recorder for MockRPCConfig.
type MockRPCConfigMockRecorder struct {
	mock *MockRPCConfig
}

// NewMockRPCConfig creates a new mock instance.
func NewMockRPCConfig(ctrl *gomock.Controller) *MockRPCConfig {
	mock := &MockRPCConfig{ctrl: ctrl}
	mock.recorder = &MockRPCConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPCConfig) EXPECT() *MockRPCConfigMockRecorder {
	return m.recorder
}

// GetEnabled mocks base method.
func (m *MockRPCConfig) GetEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetEnabled indicates an expected call of GetEnabled.
func (mr *MockRPCConfigMockRecorder) GetEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabled", reflect.TypeOf((*MockRPCConfig)(nil).GetEnabled))
}

// GetPort mocks base method.
func (m *MockRPCConfig) GetPort() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPort")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPort indicates an expected call of GetPort.
func (mr *MockRPCConfigMockRecorder) GetPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPort", reflect.TypeOf((*MockRPCConfig)(nil).GetPort))
}

// GetTimeout mocks base method.
func (m *MockRPCConfig) GetTimeout() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeout")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetTimeout indicates an expected call of GetTimeout.
func (mr *MockRPCConfigMockRecorder) GetTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeout", reflect.TypeOf((*MockRPCConfig)(nil).GetTimeout))
}

// GetUseCors mocks base method.
func (m *MockRPCConfig) GetUseCors() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUseCors")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetUseCors indicates an expected call of GetUseCors.
func (mr *MockRPCConfigMockRecorder) GetUseCors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUseCors", reflect.TypeOf((*MockRPCConfig)(nil).GetUseCors))
}

// MockPersistenceGenesisState is a mock of PersistenceGenesisState interface.
type MockPersistenceGenesisState struct {
	ctrl     *gomock.Controller
	recorder *MockPersistenceGenesisStateMockRecorder
}

// MockPersistenceGenesisStateMockRecorder is the mock recorder for MockPersistenceGenesisState.
type MockPersistenceGenesisStateMockRecorder struct {
	mock *MockPersistenceGenesisState
}

// NewMockPersistenceGenesisState creates a new mock instance.
func NewMockPersistenceGenesisState(ctrl *gomock.Controller) *MockPersistenceGenesisState {
	mock := &MockPersistenceGenesisState{ctrl: ctrl}
	mock.recorder = &MockPersistenceGenesisStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersistenceGenesisState) EXPECT() *MockPersistenceGenesisStateMockRecorder {
	return m.recorder
}

// GetAccPools mocks base method.
func (m *MockPersistenceGenesisState) GetAccPools() []modules.Account {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccPools")
	ret0, _ := ret[0].([]modules.Account)
	return ret0
}

// GetAccPools indicates an expected call of GetAccPools.
func (mr *MockPersistenceGenesisStateMockRecorder) GetAccPools() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccPools", reflect.TypeOf((*MockPersistenceGenesisState)(nil).GetAccPools))
}

// GetAccs mocks base method.
func (m *MockPersistenceGenesisState) GetAccs() []modules.Account {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccs")
	ret0, _ := ret[0].([]modules.Account)
	return ret0
}

// GetAccs indicates an expected call of GetAccs.
func (mr *MockPersistenceGenesisStateMockRecorder) GetAccs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccs", reflect.TypeOf((*MockPersistenceGenesisState)(nil).GetAccs))
}

// GetApps mocks base method.
func (m *MockPersistenceGenesisState) GetApps() []modules.Actor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApps")
	ret0, _ := ret[0].([]modules.Actor)
	return ret0
}

// GetApps indicates an expected call of GetApps.
func (mr *MockPersistenceGenesisStateMockRecorder) GetApps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApps", reflect.TypeOf((*MockPersistenceGenesisState)(nil).GetApps))
}

// GetFish mocks base method.
func (m *MockPersistenceGenesisState) GetFish() []modules.Actor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFish")
	ret0, _ := ret[0].([]modules.Actor)
	return ret0
}

// GetFish indicates an expected call of GetFish.
func (mr *MockPersistenceGenesisStateMockRecorder) GetFish() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFish", reflect.TypeOf((*MockPersistenceGenesisState)(nil).GetFish))
}

// GetNodes mocks base method.
func (m *MockPersistenceGenesisState) GetNodes() []modules.Actor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodes")
	ret0, _ := ret[0].([]modules.Actor)
	return ret0
}

// GetNodes indicates an expected call of GetNodes.
func (mr *MockPersistenceGenesisStateMockRecorder) GetNodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodes", reflect.TypeOf((*MockPersistenceGenesisState)(nil).GetNodes))
}

// GetParameters mocks base method.
func (m *MockPersistenceGenesisState) GetParameters() modules.Params {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParameters")
	ret0, _ := ret[0].(modules.Params)
	return ret0
}

// GetParameters indicates an expected call of GetParameters.
func (mr *MockPersistenceGenesisStateMockRecorder) GetParameters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParameters", reflect.TypeOf((*MockPersistenceGenesisState)(nil).GetParameters))
}

// GetVals mocks base method.
func (m *MockPersistenceGenesisState) GetVals() []modules.Actor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVals")
	ret0, _ := ret[0].([]modules.Actor)
	return ret0
}

// GetVals indicates an expected call of GetVals.
func (mr *MockPersistenceGenesisStateMockRecorder) GetVals() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVals", reflect.TypeOf((*MockPersistenceGenesisState)(nil).GetVals))
}

// MockConsensusGenesisState is a mock of ConsensusGenesisState interface.
type MockConsensusGenesisState struct {
	ctrl     *gomock.Controller
	recorder *MockConsensusGenesisStateMockRecorder
}

// MockConsensusGenesisStateMockRecorder is the mock recorder for MockConsensusGenesisState.
type MockConsensusGenesisStateMockRecorder struct {
	mock *MockConsensusGenesisState
}

// NewMockConsensusGenesisState creates a new mock instance.
func NewMockConsensusGenesisState(ctrl *gomock.Controller) *MockConsensusGenesisState {
	mock := &MockConsensusGenesisState{ctrl: ctrl}
	mock.recorder = &MockConsensusGenesisStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsensusGenesisState) EXPECT() *MockConsensusGenesisStateMockRecorder {
	return m.recorder
}

// GetChainId mocks base method.
func (m *MockConsensusGenesisState) GetChainId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetChainId indicates an expected call of GetChainId.
func (mr *MockConsensusGenesisStateMockRecorder) GetChainId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainId", reflect.TypeOf((*MockConsensusGenesisState)(nil).GetChainId))
}

// GetGenesisTime mocks base method.
func (m *MockConsensusGenesisState) GetGenesisTime() *timestamppb.Timestamp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenesisTime")
	ret0, _ := ret[0].(*timestamppb.Timestamp)
	return ret0
}

// GetGenesisTime indicates an expected call of GetGenesisTime.
func (mr *MockConsensusGenesisStateMockRecorder) GetGenesisTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenesisTime", reflect.TypeOf((*MockConsensusGenesisState)(nil).GetGenesisTime))
}

// GetMaxBlockBytes mocks base method.
func (m *MockConsensusGenesisState) GetMaxBlockBytes() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxBlockBytes")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetMaxBlockBytes indicates an expected call of GetMaxBlockBytes.
func (mr *MockConsensusGenesisStateMockRecorder) GetMaxBlockBytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxBlockBytes", reflect.TypeOf((*MockConsensusGenesisState)(nil).GetMaxBlockBytes))
}

// GetVals mocks base method.
func (m *MockConsensusGenesisState) GetVals() []modules.Actor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVals")
	ret0, _ := ret[0].([]modules.Actor)
	return ret0
}

// GetVals indicates an expected call of GetVals.
func (mr *MockConsensusGenesisStateMockRecorder) GetVals() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVals", reflect.TypeOf((*MockConsensusGenesisState)(nil).GetVals))
}

// MockAccount is a mock of Account interface.
type MockAccount struct {
	ctrl     *gomock.Controller
	recorder *MockAccountMockRecorder
}

// MockAccountMockRecorder is the mock recorder for MockAccount.
type MockAccountMockRecorder struct {
	mock *MockAccount
}

// NewMockAccount creates a new mock instance.
func NewMockAccount(ctrl *gomock.Controller) *MockAccount {
	mock := &MockAccount{ctrl: ctrl}
	mock.recorder = &MockAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccount) EXPECT() *MockAccountMockRecorder {
	return m.recorder
}

// GetAddress mocks base method.
func (m *MockAccount) GetAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockAccountMockRecorder) GetAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockAccount)(nil).GetAddress))
}

// GetAmount mocks base method.
func (m *MockAccount) GetAmount() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAmount")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAmount indicates an expected call of GetAmount.
func (mr *MockAccountMockRecorder) GetAmount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAmount", reflect.TypeOf((*MockAccount)(nil).GetAmount))
}

// MockActor is a mock of Actor interface.
type MockActor struct {
	ctrl     *gomock.Controller
	recorder *MockActorMockRecorder
}

// MockActorMockRecorder is the mock recorder for MockActor.
type MockActorMockRecorder struct {
	mock *MockActor
}

// NewMockActor creates a new mock instance.
func NewMockActor(ctrl *gomock.Controller) *MockActor {
	mock := &MockActor{ctrl: ctrl}
	mock.recorder = &MockActorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActor) EXPECT() *MockActorMockRecorder {
	return m.recorder
}

// GetActorTyp mocks base method.
func (m *MockActor) GetActorTyp() modules.ActorType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorTyp")
	ret0, _ := ret[0].(modules.ActorType)
	return ret0
}

// GetActorTyp indicates an expected call of GetActorTyp.
func (mr *MockActorMockRecorder) GetActorTyp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorTyp", reflect.TypeOf((*MockActor)(nil).GetActorTyp))
}

// GetAddress mocks base method.
func (m *MockActor) GetAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockActorMockRecorder) GetAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockActor)(nil).GetAddress))
}

// GetChains mocks base method.
func (m *MockActor) GetChains() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChains")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetChains indicates an expected call of GetChains.
func (mr *MockActorMockRecorder) GetChains() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChains", reflect.TypeOf((*MockActor)(nil).GetChains))
}

// GetGenericParam mocks base method.
func (m *MockActor) GetGenericParam() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenericParam")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetGenericParam indicates an expected call of GetGenericParam.
func (mr *MockActorMockRecorder) GetGenericParam() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenericParam", reflect.TypeOf((*MockActor)(nil).GetGenericParam))
}

// GetOutput mocks base method.
func (m *MockActor) GetOutput() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutput")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOutput indicates an expected call of GetOutput.
func (mr *MockActorMockRecorder) GetOutput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutput", reflect.TypeOf((*MockActor)(nil).GetOutput))
}

// GetPausedHeight mocks base method.
func (m *MockActor) GetPausedHeight() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPausedHeight")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetPausedHeight indicates an expected call of GetPausedHeight.
func (mr *MockActorMockRecorder) GetPausedHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPausedHeight", reflect.TypeOf((*MockActor)(nil).GetPausedHeight))
}

// GetPublicKey mocks base method.
func (m *MockActor) GetPublicKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPublicKey indicates an expected call of GetPublicKey.
func (mr *MockActorMockRecorder) GetPublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockActor)(nil).GetPublicKey))
}

// GetStakedAmount mocks base method.
func (m *MockActor) GetStakedAmount() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStakedAmount")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStakedAmount indicates an expected call of GetStakedAmount.
func (mr *MockActorMockRecorder) GetStakedAmount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStakedAmount", reflect.TypeOf((*MockActor)(nil).GetStakedAmount))
}

// GetUnstakingHeight mocks base method.
func (m *MockActor) GetUnstakingHeight() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnstakingHeight")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetUnstakingHeight indicates an expected call of GetUnstakingHeight.
func (mr *MockActorMockRecorder) GetUnstakingHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnstakingHeight", reflect.TypeOf((*MockActor)(nil).GetUnstakingHeight))
}

// MockActorType is a mock of ActorType interface.
type MockActorType struct {
	ctrl     *gomock.Controller
	recorder *MockActorTypeMockRecorder
}

// MockActorTypeMockRecorder is the mock recorder for MockActorType.
type MockActorTypeMockRecorder struct {
	mock *MockActorType
}

// NewMockActorType creates a new mock instance.
func NewMockActorType(ctrl *gomock.Controller) *MockActorType {
	mock := &MockActorType{ctrl: ctrl}
	mock.recorder = &MockActorTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorType) EXPECT() *MockActorTypeMockRecorder {
	return m.recorder
}

// String mocks base method.
func (m *MockActorType) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockActorTypeMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockActorType)(nil).String))
}

// MockIUnstakingActor is a mock of IUnstakingActor interface.
type MockIUnstakingActor struct {
	ctrl     *gomock.Controller
	recorder *MockIUnstakingActorMockRecorder
}

// MockIUnstakingActorMockRecorder is the mock recorder for MockIUnstakingActor.
type MockIUnstakingActorMockRecorder struct {
	mock *MockIUnstakingActor
}

// NewMockIUnstakingActor creates a new mock instance.
func NewMockIUnstakingActor(ctrl *gomock.Controller) *MockIUnstakingActor {
	mock := &MockIUnstakingActor{ctrl: ctrl}
	mock.recorder = &MockIUnstakingActorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUnstakingActor) EXPECT() *MockIUnstakingActorMockRecorder {
	return m.recorder
}

// GetAddress mocks base method.
func (m *MockIUnstakingActor) GetAddress() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockIUnstakingActorMockRecorder) GetAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockIUnstakingActor)(nil).GetAddress))
}

// GetOutputAddress mocks base method.
func (m *MockIUnstakingActor) GetOutputAddress() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutputAddress")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetOutputAddress indicates an expected call of GetOutputAddress.
func (mr *MockIUnstakingActorMockRecorder) GetOutputAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutputAddress", reflect.TypeOf((*MockIUnstakingActor)(nil).GetOutputAddress))
}

// GetStakeAmount mocks base method.
func (m *MockIUnstakingActor) GetStakeAmount() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStakeAmount")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStakeAmount indicates an expected call of GetStakeAmount.
func (mr *MockIUnstakingActorMockRecorder) GetStakeAmount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStakeAmount", reflect.TypeOf((*MockIUnstakingActor)(nil).GetStakeAmount))
}

// SetAddress mocks base method.
func (m *MockIUnstakingActor) SetAddress(address string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAddress", address)
}

// SetAddress indicates an expected call of SetAddress.
func (mr *MockIUnstakingActorMockRecorder) SetAddress(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAddress", reflect.TypeOf((*MockIUnstakingActor)(nil).SetAddress), address)
}

// SetOutputAddress mocks base method.
func (m *MockIUnstakingActor) SetOutputAddress(address string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOutputAddress", address)
}

// SetOutputAddress indicates an expected call of SetOutputAddress.
func (mr *MockIUnstakingActorMockRecorder) SetOutputAddress(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOutputAddress", reflect.TypeOf((*MockIUnstakingActor)(nil).SetOutputAddress), address)
}

// SetStakeAmount mocks base method.
func (m *MockIUnstakingActor) SetStakeAmount(address string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStakeAmount", address)
}

// SetStakeAmount indicates an expected call of SetStakeAmount.
func (mr *MockIUnstakingActorMockRecorder) SetStakeAmount(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStakeAmount", reflect.TypeOf((*MockIUnstakingActor)(nil).SetStakeAmount), address)
}

// MockParams is a mock of Params interface.
type MockParams struct {
	ctrl     *gomock.Controller
	recorder *MockParamsMockRecorder
}

// MockParamsMockRecorder is the mock recorder for MockParams.
type MockParamsMockRecorder struct {
	mock *MockParams
}

// NewMockParams creates a new mock instance.
func NewMockParams(ctrl *gomock.Controller) *MockParams {
	mock := &MockParams{ctrl: ctrl}
	mock.recorder = &MockParamsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParams) EXPECT() *MockParamsMockRecorder {
	return m.recorder
}

// GetAclOwner mocks base method.
func (m *MockParams) GetAclOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAclOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAclOwner indicates an expected call of GetAclOwner.
func (mr *MockParamsMockRecorder) GetAclOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAclOwner", reflect.TypeOf((*MockParams)(nil).GetAclOwner))
}

// GetAppBaselineStakeRate mocks base method.
func (m *MockParams) GetAppBaselineStakeRate() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppBaselineStakeRate")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetAppBaselineStakeRate indicates an expected call of GetAppBaselineStakeRate.
func (mr *MockParamsMockRecorder) GetAppBaselineStakeRate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppBaselineStakeRate", reflect.TypeOf((*MockParams)(nil).GetAppBaselineStakeRate))
}

// GetAppBaselineStakeRateOwner mocks base method.
func (m *MockParams) GetAppBaselineStakeRateOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppBaselineStakeRateOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAppBaselineStakeRateOwner indicates an expected call of GetAppBaselineStakeRateOwner.
func (mr *MockParamsMockRecorder) GetAppBaselineStakeRateOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppBaselineStakeRateOwner", reflect.TypeOf((*MockParams)(nil).GetAppBaselineStakeRateOwner))
}

// GetAppMaxChains mocks base method.
func (m *MockParams) GetAppMaxChains() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppMaxChains")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetAppMaxChains indicates an expected call of GetAppMaxChains.
func (mr *MockParamsMockRecorder) GetAppMaxChains() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppMaxChains", reflect.TypeOf((*MockParams)(nil).GetAppMaxChains))
}

// GetAppMaxChainsOwner mocks base method.
func (m *MockParams) GetAppMaxChainsOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppMaxChainsOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAppMaxChainsOwner indicates an expected call of GetAppMaxChainsOwner.
func (mr *MockParamsMockRecorder) GetAppMaxChainsOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppMaxChainsOwner", reflect.TypeOf((*MockParams)(nil).GetAppMaxChainsOwner))
}

// GetAppMaxPauseBlocks mocks base method.
func (m *MockParams) GetAppMaxPauseBlocks() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppMaxPauseBlocks")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetAppMaxPauseBlocks indicates an expected call of GetAppMaxPauseBlocks.
func (mr *MockParamsMockRecorder) GetAppMaxPauseBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppMaxPauseBlocks", reflect.TypeOf((*MockParams)(nil).GetAppMaxPauseBlocks))
}

// GetAppMaxPausedBlocksOwner mocks base method.
func (m *MockParams) GetAppMaxPausedBlocksOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppMaxPausedBlocksOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAppMaxPausedBlocksOwner indicates an expected call of GetAppMaxPausedBlocksOwner.
func (mr *MockParamsMockRecorder) GetAppMaxPausedBlocksOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppMaxPausedBlocksOwner", reflect.TypeOf((*MockParams)(nil).GetAppMaxPausedBlocksOwner))
}

// GetAppMinimumPauseBlocks mocks base method.
func (m *MockParams) GetAppMinimumPauseBlocks() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppMinimumPauseBlocks")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetAppMinimumPauseBlocks indicates an expected call of GetAppMinimumPauseBlocks.
func (mr *MockParamsMockRecorder) GetAppMinimumPauseBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppMinimumPauseBlocks", reflect.TypeOf((*MockParams)(nil).GetAppMinimumPauseBlocks))
}

// GetAppMinimumPauseBlocksOwner mocks base method.
func (m *MockParams) GetAppMinimumPauseBlocksOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppMinimumPauseBlocksOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAppMinimumPauseBlocksOwner indicates an expected call of GetAppMinimumPauseBlocksOwner.
func (mr *MockParamsMockRecorder) GetAppMinimumPauseBlocksOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppMinimumPauseBlocksOwner", reflect.TypeOf((*MockParams)(nil).GetAppMinimumPauseBlocksOwner))
}

// GetAppMinimumStake mocks base method.
func (m *MockParams) GetAppMinimumStake() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppMinimumStake")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAppMinimumStake indicates an expected call of GetAppMinimumStake.
func (mr *MockParamsMockRecorder) GetAppMinimumStake() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppMinimumStake", reflect.TypeOf((*MockParams)(nil).GetAppMinimumStake))
}

// GetAppMinimumStakeOwner mocks base method.
func (m *MockParams) GetAppMinimumStakeOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppMinimumStakeOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAppMinimumStakeOwner indicates an expected call of GetAppMinimumStakeOwner.
func (mr *MockParamsMockRecorder) GetAppMinimumStakeOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppMinimumStakeOwner", reflect.TypeOf((*MockParams)(nil).GetAppMinimumStakeOwner))
}

// GetAppStakingAdjustment mocks base method.
func (m *MockParams) GetAppStakingAdjustment() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppStakingAdjustment")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetAppStakingAdjustment indicates an expected call of GetAppStakingAdjustment.
func (mr *MockParamsMockRecorder) GetAppStakingAdjustment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppStakingAdjustment", reflect.TypeOf((*MockParams)(nil).GetAppStakingAdjustment))
}

// GetAppStakingAdjustmentOwner mocks base method.
func (m *MockParams) GetAppStakingAdjustmentOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppStakingAdjustmentOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAppStakingAdjustmentOwner indicates an expected call of GetAppStakingAdjustmentOwner.
func (mr *MockParamsMockRecorder) GetAppStakingAdjustmentOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppStakingAdjustmentOwner", reflect.TypeOf((*MockParams)(nil).GetAppStakingAdjustmentOwner))
}

// GetAppUnstakingBlocks mocks base method.
func (m *MockParams) GetAppUnstakingBlocks() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppUnstakingBlocks")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetAppUnstakingBlocks indicates an expected call of GetAppUnstakingBlocks.
func (mr *MockParamsMockRecorder) GetAppUnstakingBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppUnstakingBlocks", reflect.TypeOf((*MockParams)(nil).GetAppUnstakingBlocks))
}

// GetAppUnstakingBlocksOwner mocks base method.
func (m *MockParams) GetAppUnstakingBlocksOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppUnstakingBlocksOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAppUnstakingBlocksOwner indicates an expected call of GetAppUnstakingBlocksOwner.
func (mr *MockParamsMockRecorder) GetAppUnstakingBlocksOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppUnstakingBlocksOwner", reflect.TypeOf((*MockParams)(nil).GetAppUnstakingBlocksOwner))
}

// GetBlocksPerSession mocks base method.
func (m *MockParams) GetBlocksPerSession() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlocksPerSession")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetBlocksPerSession indicates an expected call of GetBlocksPerSession.
func (mr *MockParamsMockRecorder) GetBlocksPerSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlocksPerSession", reflect.TypeOf((*MockParams)(nil).GetBlocksPerSession))
}

// GetBlocksPerSessionOwner mocks base method.
func (m *MockParams) GetBlocksPerSessionOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlocksPerSessionOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBlocksPerSessionOwner indicates an expected call of GetBlocksPerSessionOwner.
func (mr *MockParamsMockRecorder) GetBlocksPerSessionOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlocksPerSessionOwner", reflect.TypeOf((*MockParams)(nil).GetBlocksPerSessionOwner))
}

// GetDoubleSignBurnPercentage mocks base method.
func (m *MockParams) GetDoubleSignBurnPercentage() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDoubleSignBurnPercentage")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetDoubleSignBurnPercentage indicates an expected call of GetDoubleSignBurnPercentage.
func (mr *MockParamsMockRecorder) GetDoubleSignBurnPercentage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDoubleSignBurnPercentage", reflect.TypeOf((*MockParams)(nil).GetDoubleSignBurnPercentage))
}

// GetDoubleSignBurnPercentageOwner mocks base method.
func (m *MockParams) GetDoubleSignBurnPercentageOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDoubleSignBurnPercentageOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDoubleSignBurnPercentageOwner indicates an expected call of GetDoubleSignBurnPercentageOwner.
func (mr *MockParamsMockRecorder) GetDoubleSignBurnPercentageOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDoubleSignBurnPercentageOwner", reflect.TypeOf((*MockParams)(nil).GetDoubleSignBurnPercentageOwner))
}

// GetFishermanMaxChains mocks base method.
func (m *MockParams) GetFishermanMaxChains() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFishermanMaxChains")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetFishermanMaxChains indicates an expected call of GetFishermanMaxChains.
func (mr *MockParamsMockRecorder) GetFishermanMaxChains() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFishermanMaxChains", reflect.TypeOf((*MockParams)(nil).GetFishermanMaxChains))
}

// GetFishermanMaxChainsOwner mocks base method.
func (m *MockParams) GetFishermanMaxChainsOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFishermanMaxChainsOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFishermanMaxChainsOwner indicates an expected call of GetFishermanMaxChainsOwner.
func (mr *MockParamsMockRecorder) GetFishermanMaxChainsOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFishermanMaxChainsOwner", reflect.TypeOf((*MockParams)(nil).GetFishermanMaxChainsOwner))
}

// GetFishermanMaxPauseBlocks mocks base method.
func (m *MockParams) GetFishermanMaxPauseBlocks() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFishermanMaxPauseBlocks")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetFishermanMaxPauseBlocks indicates an expected call of GetFishermanMaxPauseBlocks.
func (mr *MockParamsMockRecorder) GetFishermanMaxPauseBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFishermanMaxPauseBlocks", reflect.TypeOf((*MockParams)(nil).GetFishermanMaxPauseBlocks))
}

// GetFishermanMaxPausedBlocksOwner mocks base method.
func (m *MockParams) GetFishermanMaxPausedBlocksOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFishermanMaxPausedBlocksOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFishermanMaxPausedBlocksOwner indicates an expected call of GetFishermanMaxPausedBlocksOwner.
func (mr *MockParamsMockRecorder) GetFishermanMaxPausedBlocksOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFishermanMaxPausedBlocksOwner", reflect.TypeOf((*MockParams)(nil).GetFishermanMaxPausedBlocksOwner))
}

// GetFishermanMinimumPauseBlocks mocks base method.
func (m *MockParams) GetFishermanMinimumPauseBlocks() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFishermanMinimumPauseBlocks")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetFishermanMinimumPauseBlocks indicates an expected call of GetFishermanMinimumPauseBlocks.
func (mr *MockParamsMockRecorder) GetFishermanMinimumPauseBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFishermanMinimumPauseBlocks", reflect.TypeOf((*MockParams)(nil).GetFishermanMinimumPauseBlocks))
}

// GetFishermanMinimumPauseBlocksOwner mocks base method.
func (m *MockParams) GetFishermanMinimumPauseBlocksOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFishermanMinimumPauseBlocksOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFishermanMinimumPauseBlocksOwner indicates an expected call of GetFishermanMinimumPauseBlocksOwner.
func (mr *MockParamsMockRecorder) GetFishermanMinimumPauseBlocksOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFishermanMinimumPauseBlocksOwner", reflect.TypeOf((*MockParams)(nil).GetFishermanMinimumPauseBlocksOwner))
}

// GetFishermanMinimumStake mocks base method.
func (m *MockParams) GetFishermanMinimumStake() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFishermanMinimumStake")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFishermanMinimumStake indicates an expected call of GetFishermanMinimumStake.
func (mr *MockParamsMockRecorder) GetFishermanMinimumStake() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFishermanMinimumStake", reflect.TypeOf((*MockParams)(nil).GetFishermanMinimumStake))
}

// GetFishermanMinimumStakeOwner mocks base method.
func (m *MockParams) GetFishermanMinimumStakeOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFishermanMinimumStakeOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFishermanMinimumStakeOwner indicates an expected call of GetFishermanMinimumStakeOwner.
func (mr *MockParamsMockRecorder) GetFishermanMinimumStakeOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFishermanMinimumStakeOwner", reflect.TypeOf((*MockParams)(nil).GetFishermanMinimumStakeOwner))
}

// GetFishermanUnstakingBlocks mocks base method.
func (m *MockParams) GetFishermanUnstakingBlocks() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFishermanUnstakingBlocks")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetFishermanUnstakingBlocks indicates an expected call of GetFishermanUnstakingBlocks.
func (mr *MockParamsMockRecorder) GetFishermanUnstakingBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFishermanUnstakingBlocks", reflect.TypeOf((*MockParams)(nil).GetFishermanUnstakingBlocks))
}

// GetFishermanUnstakingBlocksOwner mocks base method.
func (m *MockParams) GetFishermanUnstakingBlocksOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFishermanUnstakingBlocksOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFishermanUnstakingBlocksOwner indicates an expected call of GetFishermanUnstakingBlocksOwner.
func (mr *MockParamsMockRecorder) GetFishermanUnstakingBlocksOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFishermanUnstakingBlocksOwner", reflect.TypeOf((*MockParams)(nil).GetFishermanUnstakingBlocksOwner))
}

// GetMessageChangeParameterFee mocks base method.
func (m *MockParams) GetMessageChangeParameterFee() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageChangeParameterFee")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageChangeParameterFee indicates an expected call of GetMessageChangeParameterFee.
func (mr *MockParamsMockRecorder) GetMessageChangeParameterFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageChangeParameterFee", reflect.TypeOf((*MockParams)(nil).GetMessageChangeParameterFee))
}

// GetMessageChangeParameterFeeOwner mocks base method.
func (m *MockParams) GetMessageChangeParameterFeeOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageChangeParameterFeeOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageChangeParameterFeeOwner indicates an expected call of GetMessageChangeParameterFeeOwner.
func (mr *MockParamsMockRecorder) GetMessageChangeParameterFeeOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageChangeParameterFeeOwner", reflect.TypeOf((*MockParams)(nil).GetMessageChangeParameterFeeOwner))
}

// GetMessageDoubleSignFee mocks base method.
func (m *MockParams) GetMessageDoubleSignFee() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageDoubleSignFee")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageDoubleSignFee indicates an expected call of GetMessageDoubleSignFee.
func (mr *MockParamsMockRecorder) GetMessageDoubleSignFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageDoubleSignFee", reflect.TypeOf((*MockParams)(nil).GetMessageDoubleSignFee))
}

// GetMessageDoubleSignFeeOwner mocks base method.
func (m *MockParams) GetMessageDoubleSignFeeOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageDoubleSignFeeOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageDoubleSignFeeOwner indicates an expected call of GetMessageDoubleSignFeeOwner.
func (mr *MockParamsMockRecorder) GetMessageDoubleSignFeeOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageDoubleSignFeeOwner", reflect.TypeOf((*MockParams)(nil).GetMessageDoubleSignFeeOwner))
}

// GetMessageEditStakeAppFee mocks base method.
func (m *MockParams) GetMessageEditStakeAppFee() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageEditStakeAppFee")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageEditStakeAppFee indicates an expected call of GetMessageEditStakeAppFee.
func (mr *MockParamsMockRecorder) GetMessageEditStakeAppFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageEditStakeAppFee", reflect.TypeOf((*MockParams)(nil).GetMessageEditStakeAppFee))
}

// GetMessageEditStakeAppFeeOwner mocks base method.
func (m *MockParams) GetMessageEditStakeAppFeeOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageEditStakeAppFeeOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageEditStakeAppFeeOwner indicates an expected call of GetMessageEditStakeAppFeeOwner.
func (mr *MockParamsMockRecorder) GetMessageEditStakeAppFeeOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageEditStakeAppFeeOwner", reflect.TypeOf((*MockParams)(nil).GetMessageEditStakeAppFeeOwner))
}

// GetMessageEditStakeFishermanFee mocks base method.
func (m *MockParams) GetMessageEditStakeFishermanFee() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageEditStakeFishermanFee")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageEditStakeFishermanFee indicates an expected call of GetMessageEditStakeFishermanFee.
func (mr *MockParamsMockRecorder) GetMessageEditStakeFishermanFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageEditStakeFishermanFee", reflect.TypeOf((*MockParams)(nil).GetMessageEditStakeFishermanFee))
}

// GetMessageEditStakeFishermanFeeOwner mocks base method.
func (m *MockParams) GetMessageEditStakeFishermanFeeOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageEditStakeFishermanFeeOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageEditStakeFishermanFeeOwner indicates an expected call of GetMessageEditStakeFishermanFeeOwner.
func (mr *MockParamsMockRecorder) GetMessageEditStakeFishermanFeeOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageEditStakeFishermanFeeOwner", reflect.TypeOf((*MockParams)(nil).GetMessageEditStakeFishermanFeeOwner))
}

// GetMessageEditStakeServiceNodeFee mocks base method.
func (m *MockParams) GetMessageEditStakeServiceNodeFee() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageEditStakeServiceNodeFee")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageEditStakeServiceNodeFee indicates an expected call of GetMessageEditStakeServiceNodeFee.
func (mr *MockParamsMockRecorder) GetMessageEditStakeServiceNodeFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageEditStakeServiceNodeFee", reflect.TypeOf((*MockParams)(nil).GetMessageEditStakeServiceNodeFee))
}

// GetMessageEditStakeServiceNodeFeeOwner mocks base method.
func (m *MockParams) GetMessageEditStakeServiceNodeFeeOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageEditStakeServiceNodeFeeOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageEditStakeServiceNodeFeeOwner indicates an expected call of GetMessageEditStakeServiceNodeFeeOwner.
func (mr *MockParamsMockRecorder) GetMessageEditStakeServiceNodeFeeOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageEditStakeServiceNodeFeeOwner", reflect.TypeOf((*MockParams)(nil).GetMessageEditStakeServiceNodeFeeOwner))
}

// GetMessageEditStakeValidatorFee mocks base method.
func (m *MockParams) GetMessageEditStakeValidatorFee() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageEditStakeValidatorFee")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageEditStakeValidatorFee indicates an expected call of GetMessageEditStakeValidatorFee.
func (mr *MockParamsMockRecorder) GetMessageEditStakeValidatorFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageEditStakeValidatorFee", reflect.TypeOf((*MockParams)(nil).GetMessageEditStakeValidatorFee))
}

// GetMessageEditStakeValidatorFeeOwner mocks base method.
func (m *MockParams) GetMessageEditStakeValidatorFeeOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageEditStakeValidatorFeeOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageEditStakeValidatorFeeOwner indicates an expected call of GetMessageEditStakeValidatorFeeOwner.
func (mr *MockParamsMockRecorder) GetMessageEditStakeValidatorFeeOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageEditStakeValidatorFeeOwner", reflect.TypeOf((*MockParams)(nil).GetMessageEditStakeValidatorFeeOwner))
}

// GetMessageFishermanPauseServiceNodeFee mocks base method.
func (m *MockParams) GetMessageFishermanPauseServiceNodeFee() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageFishermanPauseServiceNodeFee")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageFishermanPauseServiceNodeFee indicates an expected call of GetMessageFishermanPauseServiceNodeFee.
func (mr *MockParamsMockRecorder) GetMessageFishermanPauseServiceNodeFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageFishermanPauseServiceNodeFee", reflect.TypeOf((*MockParams)(nil).GetMessageFishermanPauseServiceNodeFee))
}

// GetMessageFishermanPauseServiceNodeFeeOwner mocks base method.
func (m *MockParams) GetMessageFishermanPauseServiceNodeFeeOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageFishermanPauseServiceNodeFeeOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageFishermanPauseServiceNodeFeeOwner indicates an expected call of GetMessageFishermanPauseServiceNodeFeeOwner.
func (mr *MockParamsMockRecorder) GetMessageFishermanPauseServiceNodeFeeOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageFishermanPauseServiceNodeFeeOwner", reflect.TypeOf((*MockParams)(nil).GetMessageFishermanPauseServiceNodeFeeOwner))
}

// GetMessagePauseAppFee mocks base method.
func (m *MockParams) GetMessagePauseAppFee() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagePauseAppFee")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessagePauseAppFee indicates an expected call of GetMessagePauseAppFee.
func (mr *MockParamsMockRecorder) GetMessagePauseAppFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagePauseAppFee", reflect.TypeOf((*MockParams)(nil).GetMessagePauseAppFee))
}

// GetMessagePauseAppFeeOwner mocks base method.
func (m *MockParams) GetMessagePauseAppFeeOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagePauseAppFeeOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessagePauseAppFeeOwner indicates an expected call of GetMessagePauseAppFeeOwner.
func (mr *MockParamsMockRecorder) GetMessagePauseAppFeeOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagePauseAppFeeOwner", reflect.TypeOf((*MockParams)(nil).GetMessagePauseAppFeeOwner))
}

// GetMessagePauseFishermanFee mocks base method.
func (m *MockParams) GetMessagePauseFishermanFee() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagePauseFishermanFee")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessagePauseFishermanFee indicates an expected call of GetMessagePauseFishermanFee.
func (mr *MockParamsMockRecorder) GetMessagePauseFishermanFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagePauseFishermanFee", reflect.TypeOf((*MockParams)(nil).GetMessagePauseFishermanFee))
}

// GetMessagePauseFishermanFeeOwner mocks base method.
func (m *MockParams) GetMessagePauseFishermanFeeOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagePauseFishermanFeeOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessagePauseFishermanFeeOwner indicates an expected call of GetMessagePauseFishermanFeeOwner.
func (mr *MockParamsMockRecorder) GetMessagePauseFishermanFeeOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagePauseFishermanFeeOwner", reflect.TypeOf((*MockParams)(nil).GetMessagePauseFishermanFeeOwner))
}

// GetMessagePauseServiceNodeFee mocks base method.
func (m *MockParams) GetMessagePauseServiceNodeFee() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagePauseServiceNodeFee")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessagePauseServiceNodeFee indicates an expected call of GetMessagePauseServiceNodeFee.
func (mr *MockParamsMockRecorder) GetMessagePauseServiceNodeFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagePauseServiceNodeFee", reflect.TypeOf((*MockParams)(nil).GetMessagePauseServiceNodeFee))
}

// GetMessagePauseServiceNodeFeeOwner mocks base method.
func (m *MockParams) GetMessagePauseServiceNodeFeeOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagePauseServiceNodeFeeOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessagePauseServiceNodeFeeOwner indicates an expected call of GetMessagePauseServiceNodeFeeOwner.
func (mr *MockParamsMockRecorder) GetMessagePauseServiceNodeFeeOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagePauseServiceNodeFeeOwner", reflect.TypeOf((*MockParams)(nil).GetMessagePauseServiceNodeFeeOwner))
}

// GetMessagePauseValidatorFee mocks base method.
func (m *MockParams) GetMessagePauseValidatorFee() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagePauseValidatorFee")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessagePauseValidatorFee indicates an expected call of GetMessagePauseValidatorFee.
func (mr *MockParamsMockRecorder) GetMessagePauseValidatorFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagePauseValidatorFee", reflect.TypeOf((*MockParams)(nil).GetMessagePauseValidatorFee))
}

// GetMessagePauseValidatorFeeOwner mocks base method.
func (m *MockParams) GetMessagePauseValidatorFeeOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagePauseValidatorFeeOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessagePauseValidatorFeeOwner indicates an expected call of GetMessagePauseValidatorFeeOwner.
func (mr *MockParamsMockRecorder) GetMessagePauseValidatorFeeOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagePauseValidatorFeeOwner", reflect.TypeOf((*MockParams)(nil).GetMessagePauseValidatorFeeOwner))
}

// GetMessageProveTestScoreFee mocks base method.
func (m *MockParams) GetMessageProveTestScoreFee() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageProveTestScoreFee")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageProveTestScoreFee indicates an expected call of GetMessageProveTestScoreFee.
func (mr *MockParamsMockRecorder) GetMessageProveTestScoreFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageProveTestScoreFee", reflect.TypeOf((*MockParams)(nil).GetMessageProveTestScoreFee))
}

// GetMessageProveTestScoreFeeOwner mocks base method.
func (m *MockParams) GetMessageProveTestScoreFeeOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageProveTestScoreFeeOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageProveTestScoreFeeOwner indicates an expected call of GetMessageProveTestScoreFeeOwner.
func (mr *MockParamsMockRecorder) GetMessageProveTestScoreFeeOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageProveTestScoreFeeOwner", reflect.TypeOf((*MockParams)(nil).GetMessageProveTestScoreFeeOwner))
}

// GetMessageSendFee mocks base method.
func (m *MockParams) GetMessageSendFee() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageSendFee")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageSendFee indicates an expected call of GetMessageSendFee.
func (mr *MockParamsMockRecorder) GetMessageSendFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageSendFee", reflect.TypeOf((*MockParams)(nil).GetMessageSendFee))
}

// GetMessageSendFeeOwner mocks base method.
func (m *MockParams) GetMessageSendFeeOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageSendFeeOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageSendFeeOwner indicates an expected call of GetMessageSendFeeOwner.
func (mr *MockParamsMockRecorder) GetMessageSendFeeOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageSendFeeOwner", reflect.TypeOf((*MockParams)(nil).GetMessageSendFeeOwner))
}

// GetMessageStakeAppFee mocks base method.
func (m *MockParams) GetMessageStakeAppFee() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageStakeAppFee")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageStakeAppFee indicates an expected call of GetMessageStakeAppFee.
func (mr *MockParamsMockRecorder) GetMessageStakeAppFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageStakeAppFee", reflect.TypeOf((*MockParams)(nil).GetMessageStakeAppFee))
}

// GetMessageStakeAppFeeOwner mocks base method.
func (m *MockParams) GetMessageStakeAppFeeOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageStakeAppFeeOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageStakeAppFeeOwner indicates an expected call of GetMessageStakeAppFeeOwner.
func (mr *MockParamsMockRecorder) GetMessageStakeAppFeeOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageStakeAppFeeOwner", reflect.TypeOf((*MockParams)(nil).GetMessageStakeAppFeeOwner))
}

// GetMessageStakeFishermanFee mocks base method.
func (m *MockParams) GetMessageStakeFishermanFee() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageStakeFishermanFee")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageStakeFishermanFee indicates an expected call of GetMessageStakeFishermanFee.
func (mr *MockParamsMockRecorder) GetMessageStakeFishermanFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageStakeFishermanFee", reflect.TypeOf((*MockParams)(nil).GetMessageStakeFishermanFee))
}

// GetMessageStakeFishermanFeeOwner mocks base method.
func (m *MockParams) GetMessageStakeFishermanFeeOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageStakeFishermanFeeOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageStakeFishermanFeeOwner indicates an expected call of GetMessageStakeFishermanFeeOwner.
func (mr *MockParamsMockRecorder) GetMessageStakeFishermanFeeOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageStakeFishermanFeeOwner", reflect.TypeOf((*MockParams)(nil).GetMessageStakeFishermanFeeOwner))
}

// GetMessageStakeServiceNodeFee mocks base method.
func (m *MockParams) GetMessageStakeServiceNodeFee() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageStakeServiceNodeFee")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageStakeServiceNodeFee indicates an expected call of GetMessageStakeServiceNodeFee.
func (mr *MockParamsMockRecorder) GetMessageStakeServiceNodeFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageStakeServiceNodeFee", reflect.TypeOf((*MockParams)(nil).GetMessageStakeServiceNodeFee))
}

// GetMessageStakeServiceNodeFeeOwner mocks base method.
func (m *MockParams) GetMessageStakeServiceNodeFeeOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageStakeServiceNodeFeeOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageStakeServiceNodeFeeOwner indicates an expected call of GetMessageStakeServiceNodeFeeOwner.
func (mr *MockParamsMockRecorder) GetMessageStakeServiceNodeFeeOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageStakeServiceNodeFeeOwner", reflect.TypeOf((*MockParams)(nil).GetMessageStakeServiceNodeFeeOwner))
}

// GetMessageStakeValidatorFee mocks base method.
func (m *MockParams) GetMessageStakeValidatorFee() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageStakeValidatorFee")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageStakeValidatorFee indicates an expected call of GetMessageStakeValidatorFee.
func (mr *MockParamsMockRecorder) GetMessageStakeValidatorFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageStakeValidatorFee", reflect.TypeOf((*MockParams)(nil).GetMessageStakeValidatorFee))
}

// GetMessageStakeValidatorFeeOwner mocks base method.
func (m *MockParams) GetMessageStakeValidatorFeeOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageStakeValidatorFeeOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageStakeValidatorFeeOwner indicates an expected call of GetMessageStakeValidatorFeeOwner.
func (mr *MockParamsMockRecorder) GetMessageStakeValidatorFeeOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageStakeValidatorFeeOwner", reflect.TypeOf((*MockParams)(nil).GetMessageStakeValidatorFeeOwner))
}

// GetMessageTestScoreFee mocks base method.
func (m *MockParams) GetMessageTestScoreFee() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageTestScoreFee")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageTestScoreFee indicates an expected call of GetMessageTestScoreFee.
func (mr *MockParamsMockRecorder) GetMessageTestScoreFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageTestScoreFee", reflect.TypeOf((*MockParams)(nil).GetMessageTestScoreFee))
}

// GetMessageTestScoreFeeOwner mocks base method.
func (m *MockParams) GetMessageTestScoreFeeOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageTestScoreFeeOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageTestScoreFeeOwner indicates an expected call of GetMessageTestScoreFeeOwner.
func (mr *MockParamsMockRecorder) GetMessageTestScoreFeeOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageTestScoreFeeOwner", reflect.TypeOf((*MockParams)(nil).GetMessageTestScoreFeeOwner))
}

// GetMessageUnpauseAppFee mocks base method.
func (m *MockParams) GetMessageUnpauseAppFee() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageUnpauseAppFee")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageUnpauseAppFee indicates an expected call of GetMessageUnpauseAppFee.
func (mr *MockParamsMockRecorder) GetMessageUnpauseAppFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageUnpauseAppFee", reflect.TypeOf((*MockParams)(nil).GetMessageUnpauseAppFee))
}

// GetMessageUnpauseAppFeeOwner mocks base method.
func (m *MockParams) GetMessageUnpauseAppFeeOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageUnpauseAppFeeOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageUnpauseAppFeeOwner indicates an expected call of GetMessageUnpauseAppFeeOwner.
func (mr *MockParamsMockRecorder) GetMessageUnpauseAppFeeOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageUnpauseAppFeeOwner", reflect.TypeOf((*MockParams)(nil).GetMessageUnpauseAppFeeOwner))
}

// GetMessageUnpauseFishermanFee mocks base method.
func (m *MockParams) GetMessageUnpauseFishermanFee() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageUnpauseFishermanFee")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageUnpauseFishermanFee indicates an expected call of GetMessageUnpauseFishermanFee.
func (mr *MockParamsMockRecorder) GetMessageUnpauseFishermanFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageUnpauseFishermanFee", reflect.TypeOf((*MockParams)(nil).GetMessageUnpauseFishermanFee))
}

// GetMessageUnpauseFishermanFeeOwner mocks base method.
func (m *MockParams) GetMessageUnpauseFishermanFeeOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageUnpauseFishermanFeeOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageUnpauseFishermanFeeOwner indicates an expected call of GetMessageUnpauseFishermanFeeOwner.
func (mr *MockParamsMockRecorder) GetMessageUnpauseFishermanFeeOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageUnpauseFishermanFeeOwner", reflect.TypeOf((*MockParams)(nil).GetMessageUnpauseFishermanFeeOwner))
}

// GetMessageUnpauseServiceNodeFee mocks base method.
func (m *MockParams) GetMessageUnpauseServiceNodeFee() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageUnpauseServiceNodeFee")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageUnpauseServiceNodeFee indicates an expected call of GetMessageUnpauseServiceNodeFee.
func (mr *MockParamsMockRecorder) GetMessageUnpauseServiceNodeFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageUnpauseServiceNodeFee", reflect.TypeOf((*MockParams)(nil).GetMessageUnpauseServiceNodeFee))
}

// GetMessageUnpauseServiceNodeFeeOwner mocks base method.
func (m *MockParams) GetMessageUnpauseServiceNodeFeeOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageUnpauseServiceNodeFeeOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageUnpauseServiceNodeFeeOwner indicates an expected call of GetMessageUnpauseServiceNodeFeeOwner.
func (mr *MockParamsMockRecorder) GetMessageUnpauseServiceNodeFeeOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageUnpauseServiceNodeFeeOwner", reflect.TypeOf((*MockParams)(nil).GetMessageUnpauseServiceNodeFeeOwner))
}

// GetMessageUnpauseValidatorFee mocks base method.
func (m *MockParams) GetMessageUnpauseValidatorFee() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageUnpauseValidatorFee")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageUnpauseValidatorFee indicates an expected call of GetMessageUnpauseValidatorFee.
func (mr *MockParamsMockRecorder) GetMessageUnpauseValidatorFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageUnpauseValidatorFee", reflect.TypeOf((*MockParams)(nil).GetMessageUnpauseValidatorFee))
}

// GetMessageUnpauseValidatorFeeOwner mocks base method.
func (m *MockParams) GetMessageUnpauseValidatorFeeOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageUnpauseValidatorFeeOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageUnpauseValidatorFeeOwner indicates an expected call of GetMessageUnpauseValidatorFeeOwner.
func (mr *MockParamsMockRecorder) GetMessageUnpauseValidatorFeeOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageUnpauseValidatorFeeOwner", reflect.TypeOf((*MockParams)(nil).GetMessageUnpauseValidatorFeeOwner))
}

// GetMessageUnstakeAppFee mocks base method.
func (m *MockParams) GetMessageUnstakeAppFee() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageUnstakeAppFee")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageUnstakeAppFee indicates an expected call of GetMessageUnstakeAppFee.
func (mr *MockParamsMockRecorder) GetMessageUnstakeAppFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageUnstakeAppFee", reflect.TypeOf((*MockParams)(nil).GetMessageUnstakeAppFee))
}

// GetMessageUnstakeAppFeeOwner mocks base method.
func (m *MockParams) GetMessageUnstakeAppFeeOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageUnstakeAppFeeOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageUnstakeAppFeeOwner indicates an expected call of GetMessageUnstakeAppFeeOwner.
func (mr *MockParamsMockRecorder) GetMessageUnstakeAppFeeOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageUnstakeAppFeeOwner", reflect.TypeOf((*MockParams)(nil).GetMessageUnstakeAppFeeOwner))
}

// GetMessageUnstakeFishermanFee mocks base method.
func (m *MockParams) GetMessageUnstakeFishermanFee() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageUnstakeFishermanFee")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageUnstakeFishermanFee indicates an expected call of GetMessageUnstakeFishermanFee.
func (mr *MockParamsMockRecorder) GetMessageUnstakeFishermanFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageUnstakeFishermanFee", reflect.TypeOf((*MockParams)(nil).GetMessageUnstakeFishermanFee))
}

// GetMessageUnstakeFishermanFeeOwner mocks base method.
func (m *MockParams) GetMessageUnstakeFishermanFeeOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageUnstakeFishermanFeeOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageUnstakeFishermanFeeOwner indicates an expected call of GetMessageUnstakeFishermanFeeOwner.
func (mr *MockParamsMockRecorder) GetMessageUnstakeFishermanFeeOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageUnstakeFishermanFeeOwner", reflect.TypeOf((*MockParams)(nil).GetMessageUnstakeFishermanFeeOwner))
}

// GetMessageUnstakeServiceNodeFee mocks base method.
func (m *MockParams) GetMessageUnstakeServiceNodeFee() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageUnstakeServiceNodeFee")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageUnstakeServiceNodeFee indicates an expected call of GetMessageUnstakeServiceNodeFee.
func (mr *MockParamsMockRecorder) GetMessageUnstakeServiceNodeFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageUnstakeServiceNodeFee", reflect.TypeOf((*MockParams)(nil).GetMessageUnstakeServiceNodeFee))
}

// GetMessageUnstakeServiceNodeFeeOwner mocks base method.
func (m *MockParams) GetMessageUnstakeServiceNodeFeeOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageUnstakeServiceNodeFeeOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageUnstakeServiceNodeFeeOwner indicates an expected call of GetMessageUnstakeServiceNodeFeeOwner.
func (mr *MockParamsMockRecorder) GetMessageUnstakeServiceNodeFeeOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageUnstakeServiceNodeFeeOwner", reflect.TypeOf((*MockParams)(nil).GetMessageUnstakeServiceNodeFeeOwner))
}

// GetMessageUnstakeValidatorFee mocks base method.
func (m *MockParams) GetMessageUnstakeValidatorFee() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageUnstakeValidatorFee")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageUnstakeValidatorFee indicates an expected call of GetMessageUnstakeValidatorFee.
func (mr *MockParamsMockRecorder) GetMessageUnstakeValidatorFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageUnstakeValidatorFee", reflect.TypeOf((*MockParams)(nil).GetMessageUnstakeValidatorFee))
}

// GetMessageUnstakeValidatorFeeOwner mocks base method.
func (m *MockParams) GetMessageUnstakeValidatorFeeOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageUnstakeValidatorFeeOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageUnstakeValidatorFeeOwner indicates an expected call of GetMessageUnstakeValidatorFeeOwner.
func (mr *MockParamsMockRecorder) GetMessageUnstakeValidatorFeeOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageUnstakeValidatorFeeOwner", reflect.TypeOf((*MockParams)(nil).GetMessageUnstakeValidatorFeeOwner))
}

// GetMissedBlocksBurnPercentage mocks base method.
func (m *MockParams) GetMissedBlocksBurnPercentage() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMissedBlocksBurnPercentage")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetMissedBlocksBurnPercentage indicates an expected call of GetMissedBlocksBurnPercentage.
func (mr *MockParamsMockRecorder) GetMissedBlocksBurnPercentage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMissedBlocksBurnPercentage", reflect.TypeOf((*MockParams)(nil).GetMissedBlocksBurnPercentage))
}

// GetMissedBlocksBurnPercentageOwner mocks base method.
func (m *MockParams) GetMissedBlocksBurnPercentageOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMissedBlocksBurnPercentageOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMissedBlocksBurnPercentageOwner indicates an expected call of GetMissedBlocksBurnPercentageOwner.
func (mr *MockParamsMockRecorder) GetMissedBlocksBurnPercentageOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMissedBlocksBurnPercentageOwner", reflect.TypeOf((*MockParams)(nil).GetMissedBlocksBurnPercentageOwner))
}

// GetProposerPercentageOfFees mocks base method.
func (m *MockParams) GetProposerPercentageOfFees() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposerPercentageOfFees")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetProposerPercentageOfFees indicates an expected call of GetProposerPercentageOfFees.
func (mr *MockParamsMockRecorder) GetProposerPercentageOfFees() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposerPercentageOfFees", reflect.TypeOf((*MockParams)(nil).GetProposerPercentageOfFees))
}

// GetProposerPercentageOfFeesOwner mocks base method.
func (m *MockParams) GetProposerPercentageOfFeesOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposerPercentageOfFeesOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetProposerPercentageOfFeesOwner indicates an expected call of GetProposerPercentageOfFeesOwner.
func (mr *MockParamsMockRecorder) GetProposerPercentageOfFeesOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposerPercentageOfFeesOwner", reflect.TypeOf((*MockParams)(nil).GetProposerPercentageOfFeesOwner))
}

// GetServiceNodeMaxChains mocks base method.
func (m *MockParams) GetServiceNodeMaxChains() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNodeMaxChains")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetServiceNodeMaxChains indicates an expected call of GetServiceNodeMaxChains.
func (mr *MockParamsMockRecorder) GetServiceNodeMaxChains() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNodeMaxChains", reflect.TypeOf((*MockParams)(nil).GetServiceNodeMaxChains))
}

// GetServiceNodeMaxChainsOwner mocks base method.
func (m *MockParams) GetServiceNodeMaxChainsOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNodeMaxChainsOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetServiceNodeMaxChainsOwner indicates an expected call of GetServiceNodeMaxChainsOwner.
func (mr *MockParamsMockRecorder) GetServiceNodeMaxChainsOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNodeMaxChainsOwner", reflect.TypeOf((*MockParams)(nil).GetServiceNodeMaxChainsOwner))
}

// GetServiceNodeMaxPauseBlocks mocks base method.
func (m *MockParams) GetServiceNodeMaxPauseBlocks() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNodeMaxPauseBlocks")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetServiceNodeMaxPauseBlocks indicates an expected call of GetServiceNodeMaxPauseBlocks.
func (mr *MockParamsMockRecorder) GetServiceNodeMaxPauseBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNodeMaxPauseBlocks", reflect.TypeOf((*MockParams)(nil).GetServiceNodeMaxPauseBlocks))
}

// GetServiceNodeMaxPausedBlocksOwner mocks base method.
func (m *MockParams) GetServiceNodeMaxPausedBlocksOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNodeMaxPausedBlocksOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetServiceNodeMaxPausedBlocksOwner indicates an expected call of GetServiceNodeMaxPausedBlocksOwner.
func (mr *MockParamsMockRecorder) GetServiceNodeMaxPausedBlocksOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNodeMaxPausedBlocksOwner", reflect.TypeOf((*MockParams)(nil).GetServiceNodeMaxPausedBlocksOwner))
}

// GetServiceNodeMinimumPauseBlocks mocks base method.
func (m *MockParams) GetServiceNodeMinimumPauseBlocks() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNodeMinimumPauseBlocks")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetServiceNodeMinimumPauseBlocks indicates an expected call of GetServiceNodeMinimumPauseBlocks.
func (mr *MockParamsMockRecorder) GetServiceNodeMinimumPauseBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNodeMinimumPauseBlocks", reflect.TypeOf((*MockParams)(nil).GetServiceNodeMinimumPauseBlocks))
}

// GetServiceNodeMinimumPauseBlocksOwner mocks base method.
func (m *MockParams) GetServiceNodeMinimumPauseBlocksOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNodeMinimumPauseBlocksOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetServiceNodeMinimumPauseBlocksOwner indicates an expected call of GetServiceNodeMinimumPauseBlocksOwner.
func (mr *MockParamsMockRecorder) GetServiceNodeMinimumPauseBlocksOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNodeMinimumPauseBlocksOwner", reflect.TypeOf((*MockParams)(nil).GetServiceNodeMinimumPauseBlocksOwner))
}

// GetServiceNodeMinimumStake mocks base method.
func (m *MockParams) GetServiceNodeMinimumStake() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNodeMinimumStake")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetServiceNodeMinimumStake indicates an expected call of GetServiceNodeMinimumStake.
func (mr *MockParamsMockRecorder) GetServiceNodeMinimumStake() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNodeMinimumStake", reflect.TypeOf((*MockParams)(nil).GetServiceNodeMinimumStake))
}

// GetServiceNodeMinimumStakeOwner mocks base method.
func (m *MockParams) GetServiceNodeMinimumStakeOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNodeMinimumStakeOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetServiceNodeMinimumStakeOwner indicates an expected call of GetServiceNodeMinimumStakeOwner.
func (mr *MockParamsMockRecorder) GetServiceNodeMinimumStakeOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNodeMinimumStakeOwner", reflect.TypeOf((*MockParams)(nil).GetServiceNodeMinimumStakeOwner))
}

// GetServiceNodeUnstakingBlocks mocks base method.
func (m *MockParams) GetServiceNodeUnstakingBlocks() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNodeUnstakingBlocks")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetServiceNodeUnstakingBlocks indicates an expected call of GetServiceNodeUnstakingBlocks.
func (mr *MockParamsMockRecorder) GetServiceNodeUnstakingBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNodeUnstakingBlocks", reflect.TypeOf((*MockParams)(nil).GetServiceNodeUnstakingBlocks))
}

// GetServiceNodeUnstakingBlocksOwner mocks base method.
func (m *MockParams) GetServiceNodeUnstakingBlocksOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNodeUnstakingBlocksOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetServiceNodeUnstakingBlocksOwner indicates an expected call of GetServiceNodeUnstakingBlocksOwner.
func (mr *MockParamsMockRecorder) GetServiceNodeUnstakingBlocksOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNodeUnstakingBlocksOwner", reflect.TypeOf((*MockParams)(nil).GetServiceNodeUnstakingBlocksOwner))
}

// GetServiceNodesPerSession mocks base method.
func (m *MockParams) GetServiceNodesPerSession() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNodesPerSession")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetServiceNodesPerSession indicates an expected call of GetServiceNodesPerSession.
func (mr *MockParamsMockRecorder) GetServiceNodesPerSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNodesPerSession", reflect.TypeOf((*MockParams)(nil).GetServiceNodesPerSession))
}

// GetServiceNodesPerSessionOwner mocks base method.
func (m *MockParams) GetServiceNodesPerSessionOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNodesPerSessionOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetServiceNodesPerSessionOwner indicates an expected call of GetServiceNodesPerSessionOwner.
func (mr *MockParamsMockRecorder) GetServiceNodesPerSessionOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNodesPerSessionOwner", reflect.TypeOf((*MockParams)(nil).GetServiceNodesPerSessionOwner))
}

// GetValidatorMaxEvidenceAgeInBlocks mocks base method.
func (m *MockParams) GetValidatorMaxEvidenceAgeInBlocks() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorMaxEvidenceAgeInBlocks")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetValidatorMaxEvidenceAgeInBlocks indicates an expected call of GetValidatorMaxEvidenceAgeInBlocks.
func (mr *MockParamsMockRecorder) GetValidatorMaxEvidenceAgeInBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorMaxEvidenceAgeInBlocks", reflect.TypeOf((*MockParams)(nil).GetValidatorMaxEvidenceAgeInBlocks))
}

// GetValidatorMaxEvidenceAgeInBlocksOwner mocks base method.
func (m *MockParams) GetValidatorMaxEvidenceAgeInBlocksOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorMaxEvidenceAgeInBlocksOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetValidatorMaxEvidenceAgeInBlocksOwner indicates an expected call of GetValidatorMaxEvidenceAgeInBlocksOwner.
func (mr *MockParamsMockRecorder) GetValidatorMaxEvidenceAgeInBlocksOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorMaxEvidenceAgeInBlocksOwner", reflect.TypeOf((*MockParams)(nil).GetValidatorMaxEvidenceAgeInBlocksOwner))
}

// GetValidatorMaxPauseBlocks mocks base method.
func (m *MockParams) GetValidatorMaxPauseBlocks() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorMaxPauseBlocks")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetValidatorMaxPauseBlocks indicates an expected call of GetValidatorMaxPauseBlocks.
func (mr *MockParamsMockRecorder) GetValidatorMaxPauseBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorMaxPauseBlocks", reflect.TypeOf((*MockParams)(nil).GetValidatorMaxPauseBlocks))
}

// GetValidatorMaxPausedBlocksOwner mocks base method.
func (m *MockParams) GetValidatorMaxPausedBlocksOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorMaxPausedBlocksOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetValidatorMaxPausedBlocksOwner indicates an expected call of GetValidatorMaxPausedBlocksOwner.
func (mr *MockParamsMockRecorder) GetValidatorMaxPausedBlocksOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorMaxPausedBlocksOwner", reflect.TypeOf((*MockParams)(nil).GetValidatorMaxPausedBlocksOwner))
}

// GetValidatorMaximumMissedBlocks mocks base method.
func (m *MockParams) GetValidatorMaximumMissedBlocks() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorMaximumMissedBlocks")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetValidatorMaximumMissedBlocks indicates an expected call of GetValidatorMaximumMissedBlocks.
func (mr *MockParamsMockRecorder) GetValidatorMaximumMissedBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorMaximumMissedBlocks", reflect.TypeOf((*MockParams)(nil).GetValidatorMaximumMissedBlocks))
}

// GetValidatorMaximumMissedBlocksOwner mocks base method.
func (m *MockParams) GetValidatorMaximumMissedBlocksOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorMaximumMissedBlocksOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetValidatorMaximumMissedBlocksOwner indicates an expected call of GetValidatorMaximumMissedBlocksOwner.
func (mr *MockParamsMockRecorder) GetValidatorMaximumMissedBlocksOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorMaximumMissedBlocksOwner", reflect.TypeOf((*MockParams)(nil).GetValidatorMaximumMissedBlocksOwner))
}

// GetValidatorMinimumPauseBlocks mocks base method.
func (m *MockParams) GetValidatorMinimumPauseBlocks() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorMinimumPauseBlocks")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetValidatorMinimumPauseBlocks indicates an expected call of GetValidatorMinimumPauseBlocks.
func (mr *MockParamsMockRecorder) GetValidatorMinimumPauseBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorMinimumPauseBlocks", reflect.TypeOf((*MockParams)(nil).GetValidatorMinimumPauseBlocks))
}

// GetValidatorMinimumPauseBlocksOwner mocks base method.
func (m *MockParams) GetValidatorMinimumPauseBlocksOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorMinimumPauseBlocksOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetValidatorMinimumPauseBlocksOwner indicates an expected call of GetValidatorMinimumPauseBlocksOwner.
func (mr *MockParamsMockRecorder) GetValidatorMinimumPauseBlocksOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorMinimumPauseBlocksOwner", reflect.TypeOf((*MockParams)(nil).GetValidatorMinimumPauseBlocksOwner))
}

// GetValidatorMinimumStake mocks base method.
func (m *MockParams) GetValidatorMinimumStake() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorMinimumStake")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetValidatorMinimumStake indicates an expected call of GetValidatorMinimumStake.
func (mr *MockParamsMockRecorder) GetValidatorMinimumStake() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorMinimumStake", reflect.TypeOf((*MockParams)(nil).GetValidatorMinimumStake))
}

// GetValidatorMinimumStakeOwner mocks base method.
func (m *MockParams) GetValidatorMinimumStakeOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorMinimumStakeOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetValidatorMinimumStakeOwner indicates an expected call of GetValidatorMinimumStakeOwner.
func (mr *MockParamsMockRecorder) GetValidatorMinimumStakeOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorMinimumStakeOwner", reflect.TypeOf((*MockParams)(nil).GetValidatorMinimumStakeOwner))
}

// GetValidatorUnstakingBlocks mocks base method.
func (m *MockParams) GetValidatorUnstakingBlocks() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorUnstakingBlocks")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetValidatorUnstakingBlocks indicates an expected call of GetValidatorUnstakingBlocks.
func (mr *MockParamsMockRecorder) GetValidatorUnstakingBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorUnstakingBlocks", reflect.TypeOf((*MockParams)(nil).GetValidatorUnstakingBlocks))
}

// GetValidatorUnstakingBlocksOwner mocks base method.
func (m *MockParams) GetValidatorUnstakingBlocksOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorUnstakingBlocksOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetValidatorUnstakingBlocksOwner indicates an expected call of GetValidatorUnstakingBlocksOwner.
func (mr *MockParamsMockRecorder) GetValidatorUnstakingBlocksOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorUnstakingBlocksOwner", reflect.TypeOf((*MockParams)(nil).GetValidatorUnstakingBlocksOwner))
}

// MockTxResult is a mock of TxResult interface.
type MockTxResult struct {
	ctrl     *gomock.Controller
	recorder *MockTxResultMockRecorder
}

// MockTxResultMockRecorder is the mock recorder for MockTxResult.
type MockTxResultMockRecorder struct {
	mock *MockTxResult
}

// NewMockTxResult creates a new mock instance.
func NewMockTxResult(ctrl *gomock.Controller) *MockTxResult {
	mock := &MockTxResult{ctrl: ctrl}
	mock.recorder = &MockTxResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxResult) EXPECT() *MockTxResultMockRecorder {
	return m.recorder
}

// Bytes mocks base method.
func (m *MockTxResult) Bytes() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bytes indicates an expected call of Bytes.
func (mr *MockTxResultMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockTxResult)(nil).Bytes))
}

// FromBytes mocks base method.
func (m *MockTxResult) FromBytes(arg0 []byte) (modules.TxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromBytes", arg0)
	ret0, _ := ret[0].(modules.TxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromBytes indicates an expected call of FromBytes.
func (mr *MockTxResultMockRecorder) FromBytes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromBytes", reflect.TypeOf((*MockTxResult)(nil).FromBytes), arg0)
}

// GetError mocks base method.
func (m *MockTxResult) GetError() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetError")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetError indicates an expected call of GetError.
func (mr *MockTxResultMockRecorder) GetError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetError", reflect.TypeOf((*MockTxResult)(nil).GetError))
}

// GetHeight mocks base method.
func (m *MockTxResult) GetHeight() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeight")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetHeight indicates an expected call of GetHeight.
func (mr *MockTxResultMockRecorder) GetHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeight", reflect.TypeOf((*MockTxResult)(nil).GetHeight))
}

// GetIndex mocks base method.
func (m *MockTxResult) GetIndex() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndex")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetIndex indicates an expected call of GetIndex.
func (mr *MockTxResultMockRecorder) GetIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndex", reflect.TypeOf((*MockTxResult)(nil).GetIndex))
}

// GetMessageType mocks base method.
func (m *MockTxResult) GetMessageType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessageType indicates an expected call of GetMessageType.
func (mr *MockTxResultMockRecorder) GetMessageType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageType", reflect.TypeOf((*MockTxResult)(nil).GetMessageType))
}

// GetRecipientAddr mocks base method.
func (m *MockTxResult) GetRecipientAddr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipientAddr")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRecipientAddr indicates an expected call of GetRecipientAddr.
func (mr *MockTxResultMockRecorder) GetRecipientAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipientAddr", reflect.TypeOf((*MockTxResult)(nil).GetRecipientAddr))
}

// GetResultCode mocks base method.
func (m *MockTxResult) GetResultCode() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResultCode")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetResultCode indicates an expected call of GetResultCode.
func (mr *MockTxResultMockRecorder) GetResultCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResultCode", reflect.TypeOf((*MockTxResult)(nil).GetResultCode))
}

// GetSignerAddr mocks base method.
func (m *MockTxResult) GetSignerAddr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignerAddr")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSignerAddr indicates an expected call of GetSignerAddr.
func (mr *MockTxResultMockRecorder) GetSignerAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignerAddr", reflect.TypeOf((*MockTxResult)(nil).GetSignerAddr))
}

// GetTx mocks base method.
func (m *MockTxResult) GetTx() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTx")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetTx indicates an expected call of GetTx.
func (mr *MockTxResultMockRecorder) GetTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTx", reflect.TypeOf((*MockTxResult)(nil).GetTx))
}

// Hash mocks base method.
func (m *MockTxResult) Hash() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *MockTxResultMockRecorder) Hash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockTxResult)(nil).Hash))
}

// HashFromBytes mocks base method.
func (m *MockTxResult) HashFromBytes(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashFromBytes", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashFromBytes indicates an expected call of HashFromBytes.
func (mr *MockTxResultMockRecorder) HashFromBytes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashFromBytes", reflect.TypeOf((*MockTxResult)(nil).HashFromBytes), arg0)
}
