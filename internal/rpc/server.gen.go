// Package rpc provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package rpc

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ConsensusState defines model for ConsensusState.
type ConsensusState struct {
	Height int64 `json:"height"`
	Round  int64 `json:"round"`
	Step   int64 `json:"step"`
}

// RawTXRequest defines model for RawTXRequest.
type RawTXRequest struct {
	Address     string `json:"address"`
	RawHexBytes string `json:"raw_hex_bytes"`
}

// PostV1ClientBroadcastTxSyncJSONBody defines parameters for PostV1ClientBroadcastTxSync.
type PostV1ClientBroadcastTxSyncJSONBody = RawTXRequest

// PostV1ClientBroadcastTxSyncJSONRequestBody defines body for PostV1ClientBroadcastTxSync for application/json ContentType.
type PostV1ClientBroadcastTxSyncJSONRequestBody = PostV1ClientBroadcastTxSyncJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Broadcast raw transaction bytes
	// (POST /v1/client/broadcast_tx_sync)
	PostV1ClientBroadcastTxSync(ctx echo.Context) error
	// Gets the current height, round and step
	// (GET /v1/consensus/state)
	GetV1ConsensusState(ctx echo.Context) error
	// Get the liveness of the Pocket API node
	// (GET /v1/health)
	GetV1Health(ctx echo.Context) error
	// Get the current version of the Pocket Network API
	// (GET /v1/version)
	GetV1Version(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostV1ClientBroadcastTxSync converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ClientBroadcastTxSync(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1ClientBroadcastTxSync(ctx)
	return err
}

// GetV1ConsensusState converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ConsensusState(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1ConsensusState(ctx)
	return err
}

// GetV1Health converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1Health(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1Health(ctx)
	return err
}

// GetV1Version converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1Version(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1Version(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v1/client/broadcast_tx_sync", wrapper.PostV1ClientBroadcastTxSync)
	router.GET(baseURL+"/v1/consensus/state", wrapper.GetV1ConsensusState)
	router.GET(baseURL+"/v1/health", wrapper.GetV1Health)
	router.GET(baseURL+"/v1/version", wrapper.GetV1Version)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xWb2/bthP+KgR/v5eu5TRtN/jV2rTrgmVpkLjBgDUIzuTZYkORKnmKLQT+7sNRki3L",
	"aWcMeydb9/e557nTk1S+KL1DR1FOn2RUORaQHs+8i+hiFW8ICPmfMvgSAxlM73M0y5z4aeFDASSn0jh6",
	"80qOJNUlNj9xiUFuRjL4yukjbSNheZQpx8VvlQmo5fSvrqAuWRvobuvn519REWe4htXsz2v8VmGkw8ZA",
	"64AxPbaekYJxy9QHrO5zXN/Pa8LnLAYldaGGjodFsSeuCYMD+96rFFtjVMGUZLyTU/mrcVr4ikThAwqY",
	"8+OVVw9I4hJp5cODHMkqWDmVOVEZp1lW+gcau/blZiSNW3gOrLwjUKl1LMAkF2/hl6H9fgGz3ERhoqAc",
	"xdurc6FxYZzhl4M6xKXXKK6vzgSPKixA4fiL++JaKxMFCG0YsnlFqEWbUVAOJAJaqKPQQCBCM6IowGkR",
	"MJZMySjIpz8WwRcCXC3m1qsHlYNxItaRsOhne8RgFgajAGub4Kib6ByDJ+8D9wDW1iLgCoJuWiwhkFGm",
	"BDJuKZzXGMXKUC6uPv0+G8uRtEahi0kZDgoe5h/nM3HR/jucxdJQXs3HyhdpLC/aprMylZnNrZ9nBRiX",
	"XZyffbi8+cD4E4YiflrcYHg0Cr8z2CxZZawPQ5atDljxiCE2MzwZT8YTDu1LdFAaOZWn48n4VI5kCZQn",
	"2mWPJ5myBh1l8+BBK4h0T+v7WDuV1OIb1bBmgKE71ylppNuTs+T3rnObrW/YqREFRnrndd0REF2KAmVp",
	"jUpxsq+Ri+y2ED/9P+BCTuX/st2aytodle2pOAlon6/XsBIUwEVQiaTkxRzFtiXUsi9WChUm9bYs4+wv",
	"J5NDHc56IUFr1ByYCVNgUXpvE0lYnBiCD5HBftXE6XVNuKastGBSv7iGokyj66USfiEWYGwVUB429w50",
	"Jw/O8Pq/z/DWNR0Ir1QVAmqxyo1F7pkFwR0P0O2BkOLFqigg1FxtB7oIg6E0+3AkCZaRN2ZDPHnH/omI",
	"3RXKYneGlvgM/T4is2//ZA2mqXEBlaUj+LdFa3flfno9OXmzvWOT7kqdcptHsXVQ2zN8fd/Ut110Aww/",
	"IjWLKU3DkWhKG4lUU9pmqaYell3KHZw5gqX8xyj+1tgco4XGtG44/urw/WfXJKzFC/HZBQSVw9xij7Hf",
	"t+eth0F8YA4eQpGQsOYRHcbIRObf7eLj48T7ugdF2/cWh+1G/BEQt63RUTza19uOEzvlNbt3dPDJ8C+I",
	"sMeDtpcBCN0tfnt13sOh6/supY0JYn7x1LtW0yyzXoHNfaTp68nPpy/l5m4bYjiy22ezN1nbs9gl3YyG",
	"zhf/OMA2RDu/wwjvTSyBVN5+IlioRWzOZdx5t0vl0HsryuTK3yIFUu5133cros3d5u8AAAD//wh5izUv",
	"CwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
